// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEELscpProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public enum LscpErrorCode implements java.io.Serializable
{
    TEEE_OK_SVERVER(200),
    TEEE_REGISTER_NOT_AUTH(401),
    TEEE_REGISTER_ERR_PSW(403),
    TEEE_REGISTER_NOT_FOUND(404),
    TEEE_REGISTER_FORBIDDEN(406),
    TEEE_REGISTER_ERR_SERVER(500);

    public int value()
    {
        return _value;
    }

    public static LscpErrorCode valueOf(int v)
    {
        switch(v)
        {
        case 200:
            return TEEE_OK_SVERVER;
        case 401:
            return TEEE_REGISTER_NOT_AUTH;
        case 403:
            return TEEE_REGISTER_ERR_PSW;
        case 404:
            return TEEE_REGISTER_NOT_FOUND;
        case 406:
            return TEEE_REGISTER_FORBIDDEN;
        case 500:
            return TEEE_REGISTER_ERR_SERVER;
        }
        return null;
    }

    private LscpErrorCode(int v)
    {
        _value = v;
    }

    public void ice_write(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeEnum(_value, 500);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, LscpErrorCode v)
    {
        if(v == null)
        {
            ostr.writeEnum(LscpErrorCode.TEEE_OK_SVERVER.value(), 500);
        }
        else
        {
            ostr.writeEnum(v.value(), 500);
        }
    }

    public static LscpErrorCode ice_read(com.zeroc.Ice.InputStream istr)
    {
        int v = istr.readEnum(500);
        return validate(v);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LscpErrorCode> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LscpErrorCode v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            ice_write(ostr, v);
        }
    }

    public static java.util.Optional<LscpErrorCode> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            return java.util.Optional.of(ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static LscpErrorCode validate(int v)
    {
        final LscpErrorCode e = valueOf(v);
        if(e == null)
        {
            throw new com.zeroc.Ice.MarshalException("enumerator value " + v + " is out of range");
        }
        return e;
    }

    private final int _value;
}
