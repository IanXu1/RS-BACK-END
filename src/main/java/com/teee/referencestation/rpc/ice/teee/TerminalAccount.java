// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEETerminalAccount.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class TerminalAccount implements Cloneable,
                                        java.io.Serializable
{
    public long terminalAccountId;

    public long getTerminalAccountId()
    {
        return terminalAccountId;
    }

    public void setTerminalAccountId(long terminalAccountId)
    {
        this.terminalAccountId = terminalAccountId;
    }

    public String username;

    public String getUsername()
    {
        return username;
    }

    public void setUsername(String username)
    {
        this.username = username;
    }

    public String password;

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    public int accountType;

    public int getAccountType()
    {
        return accountType;
    }

    public void setAccountType(int accountType)
    {
        this.accountType = accountType;
    }

    public ExpiryCtlInfo expiryCtlInfo;

    public ExpiryCtlInfo getExpiryCtlInfo()
    {
        return expiryCtlInfo;
    }

    public void setExpiryCtlInfo(ExpiryCtlInfo expiryCtlInfo)
    {
        this.expiryCtlInfo = expiryCtlInfo;
    }

    public AuditingInfo auditingInfo;

    public AuditingInfo getAuditingInfo()
    {
        return auditingInfo;
    }

    public void setAuditingInfo(AuditingInfo auditingInfo)
    {
        this.auditingInfo = auditingInfo;
    }

    public TerminalAccount()
    {
        this.terminalAccountId = 0L;
        this.username = "";
        this.password = "";
        this.accountType = 1;
        this.expiryCtlInfo = new ExpiryCtlInfo();
        this.auditingInfo = new AuditingInfo();
    }

    public TerminalAccount(long terminalAccountId, String username, String password, int accountType, ExpiryCtlInfo expiryCtlInfo, AuditingInfo auditingInfo)
    {
        this.terminalAccountId = terminalAccountId;
        this.username = username;
        this.password = password;
        this.accountType = accountType;
        this.expiryCtlInfo = expiryCtlInfo;
        this.auditingInfo = auditingInfo;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TerminalAccount r = null;
        if(rhs instanceof TerminalAccount)
        {
            r = (TerminalAccount)rhs;
        }

        if(r != null)
        {
            if(this.terminalAccountId != r.terminalAccountId)
            {
                return false;
            }
            if(this.username != r.username)
            {
                if(this.username == null || r.username == null || !this.username.equals(r.username))
                {
                    return false;
                }
            }
            if(this.password != r.password)
            {
                if(this.password == null || r.password == null || !this.password.equals(r.password))
                {
                    return false;
                }
            }
            if(this.accountType != r.accountType)
            {
                return false;
            }
            if(this.expiryCtlInfo != r.expiryCtlInfo)
            {
                if(this.expiryCtlInfo == null || r.expiryCtlInfo == null || !this.expiryCtlInfo.equals(r.expiryCtlInfo))
                {
                    return false;
                }
            }
            if(this.auditingInfo != r.auditingInfo)
            {
                if(this.auditingInfo == null || r.auditingInfo == null || !this.auditingInfo.equals(r.auditingInfo))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::TerminalAccount");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, terminalAccountId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, username);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, password);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, accountType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, expiryCtlInfo);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, auditingInfo);
        return h_;
    }

    public TerminalAccount clone()
    {
        TerminalAccount c = null;
        try
        {
            c = (TerminalAccount)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.terminalAccountId);
        ostr.writeString(this.username);
        ostr.writeString(this.password);
        ostr.writeInt(this.accountType);
        ExpiryCtlInfo.ice_write(ostr, this.expiryCtlInfo);
        AuditingInfo.ice_write(ostr, this.auditingInfo);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.terminalAccountId = istr.readLong();
        this.username = istr.readString();
        this.password = istr.readString();
        this.accountType = istr.readInt();
        this.expiryCtlInfo = ExpiryCtlInfo.ice_read(istr);
        this.auditingInfo = AuditingInfo.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, TerminalAccount v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public TerminalAccount ice_read(com.zeroc.Ice.InputStream istr)
    {
        TerminalAccount v = new TerminalAccount();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<TerminalAccount> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, TerminalAccount v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<TerminalAccount> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(TerminalAccount.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final TerminalAccount _nullMarshalValue = new TerminalAccount();

    public static final long serialVersionUID = 1288473406L;
}
