// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEELscpProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class LscpExtendHeader implements Cloneable,
                                         java.io.Serializable
{
    public long idx;

    public long getIdx()
    {
        return idx;
    }

    public void setIdx(long idx)
    {
        this.idx = idx;
    }

    public LscpEndPoint srcPoint;

    public LscpEndPoint getSrcPoint()
    {
        return srcPoint;
    }

    public void setSrcPoint(LscpEndPoint srcPoint)
    {
        this.srcPoint = srcPoint;
    }

    public LscpEndPoint destPoint;

    public LscpEndPoint getDestPoint()
    {
        return destPoint;
    }

    public void setDestPoint(LscpEndPoint destPoint)
    {
        this.destPoint = destPoint;
    }

    public LscpExtendHeader()
    {
        this.idx = 0L;
        this.srcPoint = new LscpEndPoint();
        this.destPoint = new LscpEndPoint();
    }

    public LscpExtendHeader(long idx, LscpEndPoint srcPoint, LscpEndPoint destPoint)
    {
        this.idx = idx;
        this.srcPoint = srcPoint;
        this.destPoint = destPoint;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LscpExtendHeader r = null;
        if(rhs instanceof LscpExtendHeader)
        {
            r = (LscpExtendHeader)rhs;
        }

        if(r != null)
        {
            if(this.idx != r.idx)
            {
                return false;
            }
            if(this.srcPoint != r.srcPoint)
            {
                if(this.srcPoint == null || r.srcPoint == null || !this.srcPoint.equals(r.srcPoint))
                {
                    return false;
                }
            }
            if(this.destPoint != r.destPoint)
            {
                if(this.destPoint == null || r.destPoint == null || !this.destPoint.equals(r.destPoint))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::LscpExtendHeader");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idx);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, srcPoint);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, destPoint);
        return h_;
    }

    public LscpExtendHeader clone()
    {
        LscpExtendHeader c = null;
        try
        {
            c = (LscpExtendHeader)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.idx);
        LscpEndPoint.ice_write(ostr, this.srcPoint);
        LscpEndPoint.ice_write(ostr, this.destPoint);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.idx = istr.readLong();
        this.srcPoint = LscpEndPoint.ice_read(istr);
        this.destPoint = LscpEndPoint.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LscpExtendHeader v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LscpExtendHeader ice_read(com.zeroc.Ice.InputStream istr)
    {
        LscpExtendHeader v = new LscpExtendHeader();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LscpExtendHeader> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LscpExtendHeader v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LscpExtendHeader> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LscpExtendHeader.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LscpExtendHeader _nullMarshalValue = new LscpExtendHeader();

    public static final long serialVersionUID = -350674631L;
}
