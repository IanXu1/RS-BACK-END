// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCExtd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public enum DCExtdCmd implements java.io.Serializable
{
    E_DCEXTDCMD_ERROR(0),
    E_CS_ACCOUNTNAME2UUID_SET(1),
    E_CS_ACCOUNTNAME2UUID_GET(2),
    E_CS_ACCOUNTNAME2UUID_DEL(3),
    E_CS_LSCPSESSION2UUID_SET(5),
    E_CS_LSCPSESSION2UUID_GET(6),
    E_CS_LSCPSESSION2UUID_DEL(7),
    E_CS_ACCOUNTLOCKSTATUS_LOCKOP(11),
    E_CS_ACCOUNTLOCKSTATUS_GETLOCKEDLIST(12),
    E_CS_GET_ACCOUNT_STATUS(21),
    E_CS_NTF_WEB2CLI_HAS_NEW_VER(31),
    E_CS_GET_LSCP_TURNON_ST(41),
    E_CS_ISEXIST_LSCP_RT_SNO(42),
    E_CS_ADD_LSCP_RT_SNO(43),
    E_SC_ACCOUNTNAME2UUID_SET(1001),
    E_SC_ACCOUNTNAME2UUID_GET(1002),
    E_SC_ACCOUNTNAME2UUID_DEL(1003),
    E_SC_LSCPSESSION2UUID_SET(1005),
    E_SC_LSCPSESSION2UUID_GET(1006),
    E_SC_LSCPSESSION2UUID_DEL(1007),
    E_SC_ACCOUNTLOCKSTATUS_LOCKOP(1011),
    E_SC_ACCOUNTLOCKSTATUS_GETLOCKEDLIST(1012),
    E_SC_GET_ACCOUNT_STATUS(1021),
    E_SC_NTF_WEB2CLI_HAS_NEW_VER(1031),
    E_SC_GET_LSCP_TURNON_ST(1041),
    E_SC_ISEXIST_LSCP_RT_SNO(1042),
    E_SC_ADD_LSCP_RT_SNO(1043);

    public int value()
    {
        return _value;
    }

    public static DCExtdCmd valueOf(int v)
    {
        switch(v)
        {
        case 0:
            return E_DCEXTDCMD_ERROR;
        case 1:
            return E_CS_ACCOUNTNAME2UUID_SET;
        case 2:
            return E_CS_ACCOUNTNAME2UUID_GET;
        case 3:
            return E_CS_ACCOUNTNAME2UUID_DEL;
        case 5:
            return E_CS_LSCPSESSION2UUID_SET;
        case 6:
            return E_CS_LSCPSESSION2UUID_GET;
        case 7:
            return E_CS_LSCPSESSION2UUID_DEL;
        case 11:
            return E_CS_ACCOUNTLOCKSTATUS_LOCKOP;
        case 12:
            return E_CS_ACCOUNTLOCKSTATUS_GETLOCKEDLIST;
        case 21:
            return E_CS_GET_ACCOUNT_STATUS;
        case 31:
            return E_CS_NTF_WEB2CLI_HAS_NEW_VER;
        case 41:
            return E_CS_GET_LSCP_TURNON_ST;
        case 42:
            return E_CS_ISEXIST_LSCP_RT_SNO;
        case 43:
            return E_CS_ADD_LSCP_RT_SNO;
        case 1001:
            return E_SC_ACCOUNTNAME2UUID_SET;
        case 1002:
            return E_SC_ACCOUNTNAME2UUID_GET;
        case 1003:
            return E_SC_ACCOUNTNAME2UUID_DEL;
        case 1005:
            return E_SC_LSCPSESSION2UUID_SET;
        case 1006:
            return E_SC_LSCPSESSION2UUID_GET;
        case 1007:
            return E_SC_LSCPSESSION2UUID_DEL;
        case 1011:
            return E_SC_ACCOUNTLOCKSTATUS_LOCKOP;
        case 1012:
            return E_SC_ACCOUNTLOCKSTATUS_GETLOCKEDLIST;
        case 1021:
            return E_SC_GET_ACCOUNT_STATUS;
        case 1031:
            return E_SC_NTF_WEB2CLI_HAS_NEW_VER;
        case 1041:
            return E_SC_GET_LSCP_TURNON_ST;
        case 1042:
            return E_SC_ISEXIST_LSCP_RT_SNO;
        case 1043:
            return E_SC_ADD_LSCP_RT_SNO;
        }
        return null;
    }

    private DCExtdCmd(int v)
    {
        _value = v;
    }

    public void ice_write(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeEnum(_value, 1043);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, DCExtdCmd v)
    {
        if(v == null)
        {
            ostr.writeEnum(DCExtdCmd.E_DCEXTDCMD_ERROR.value(), 1043);
        }
        else
        {
            ostr.writeEnum(v.value(), 1043);
        }
    }

    public static DCExtdCmd ice_read(com.zeroc.Ice.InputStream istr)
    {
        int v = istr.readEnum(1043);
        return validate(v);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCExtdCmd> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCExtdCmd v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            ice_write(ostr, v);
        }
    }

    public static java.util.Optional<DCExtdCmd> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            return java.util.Optional.of(ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static DCExtdCmd validate(int v)
    {
        final DCExtdCmd e = valueOf(v);
        if(e == null)
        {
            throw new com.zeroc.Ice.MarshalException("enumerator value " + v + " is out of range");
        }
        return e;
    }

    private final int _value;
}
