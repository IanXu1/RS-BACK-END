// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEFilePack.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class FsSetReq implements Cloneable,
                                 java.io.Serializable
{
    public FSService fsService;

    public FSService getFsService()
    {
        return fsService;
    }

    public void setFsService(FSService fsService)
    {
        this.fsService = fsService;
    }

    public String key;

    public String getKey()
    {
        return key;
    }

    public void setKey(String key)
    {
        this.key = key;
    }

    public String content;

    public String getContent()
    {
        return content;
    }

    public void setContent(String content)
    {
        this.content = content;
    }

    public FsSetReq()
    {
        this.fsService = FSService.E_FSCMD_VER;
        this.key = "";
        this.content = "";
    }

    public FsSetReq(FSService fsService, String key, String content)
    {
        this.fsService = fsService;
        this.key = key;
        this.content = content;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FsSetReq r = null;
        if(rhs instanceof FsSetReq)
        {
            r = (FsSetReq)rhs;
        }

        if(r != null)
        {
            if(this.fsService != r.fsService)
            {
                if(this.fsService == null || r.fsService == null || !this.fsService.equals(r.fsService))
                {
                    return false;
                }
            }
            if(this.key != r.key)
            {
                if(this.key == null || r.key == null || !this.key.equals(r.key))
                {
                    return false;
                }
            }
            if(this.content != r.content)
            {
                if(this.content == null || r.content == null || !this.content.equals(r.content))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::FsSetReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fsService);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, key);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, content);
        return h_;
    }

    public FsSetReq clone()
    {
        FsSetReq c = null;
        try
        {
            c = (FsSetReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        FSService.ice_write(ostr, this.fsService);
        ostr.writeString(this.key);
        ostr.writeString(this.content);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.fsService = FSService.ice_read(istr);
        this.key = istr.readString();
        this.content = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, FsSetReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public FsSetReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        FsSetReq v = new FsSetReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<FsSetReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, FsSetReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<FsSetReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(FsSetReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final FsSetReq _nullMarshalValue = new FsSetReq();

    public static final long serialVersionUID = 94685498L;
}
