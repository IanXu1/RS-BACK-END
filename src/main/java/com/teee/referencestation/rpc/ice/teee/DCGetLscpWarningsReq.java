// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCExtd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCGetLscpWarningsReq implements Cloneable,
                                             java.io.Serializable
{
    public boolean isOrdeByTimeDesc;

    public boolean getIsOrdeByTimeDesc()
    {
        return isOrdeByTimeDesc;
    }

    public void setIsOrdeByTimeDesc(boolean isOrdeByTimeDesc)
    {
        this.isOrdeByTimeDesc = isOrdeByTimeDesc;
    }

    public boolean isIsOrdeByTimeDesc()
    {
        return isOrdeByTimeDesc;
    }

    public boolean isQryAll;

    public boolean getIsQryAll()
    {
        return isQryAll;
    }

    public void setIsQryAll(boolean isQryAll)
    {
        this.isQryAll = isQryAll;
    }

    public boolean isIsQryAll()
    {
        return isQryAll;
    }

    public long[] uuids;

    public long[] getUuids()
    {
        return uuids;
    }

    public void setUuids(long[] uuids)
    {
        this.uuids = uuids;
    }

    public long getUuids(int index)
    {
        return this.uuids[index];
    }

    public void setUuids(int index, long val)
    {
        this.uuids[index] = val;
    }

    public boolean isQryHistory;

    public boolean getIsQryHistory()
    {
        return isQryHistory;
    }

    public void setIsQryHistory(boolean isQryHistory)
    {
        this.isQryHistory = isQryHistory;
    }

    public boolean isIsQryHistory()
    {
        return isQryHistory;
    }

    public long startTimeOfHistory;

    public long getStartTimeOfHistory()
    {
        return startTimeOfHistory;
    }

    public void setStartTimeOfHistory(long startTimeOfHistory)
    {
        this.startTimeOfHistory = startTimeOfHistory;
    }

    public long endTimeOfHistory;

    public long getEndTimeOfHistory()
    {
        return endTimeOfHistory;
    }

    public void setEndTimeOfHistory(long endTimeOfHistory)
    {
        this.endTimeOfHistory = endTimeOfHistory;
    }

    public DCGetLscpWarningsReq()
    {
        this.isOrdeByTimeDesc = true;
        this.isQryAll = true;
        this.isQryHistory = false;
        this.startTimeOfHistory = 0L;
        this.endTimeOfHistory = 0L;
    }

    public DCGetLscpWarningsReq(boolean isOrdeByTimeDesc, boolean isQryAll, long[] uuids, boolean isQryHistory, long startTimeOfHistory, long endTimeOfHistory)
    {
        this.isOrdeByTimeDesc = isOrdeByTimeDesc;
        this.isQryAll = isQryAll;
        this.uuids = uuids;
        this.isQryHistory = isQryHistory;
        this.startTimeOfHistory = startTimeOfHistory;
        this.endTimeOfHistory = endTimeOfHistory;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCGetLscpWarningsReq r = null;
        if(rhs instanceof DCGetLscpWarningsReq)
        {
            r = (DCGetLscpWarningsReq)rhs;
        }

        if(r != null)
        {
            if(this.isOrdeByTimeDesc != r.isOrdeByTimeDesc)
            {
                return false;
            }
            if(this.isQryAll != r.isQryAll)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.uuids, r.uuids))
            {
                return false;
            }
            if(this.isQryHistory != r.isQryHistory)
            {
                return false;
            }
            if(this.startTimeOfHistory != r.startTimeOfHistory)
            {
                return false;
            }
            if(this.endTimeOfHistory != r.endTimeOfHistory)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCGetLscpWarningsReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isOrdeByTimeDesc);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isQryAll);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, uuids);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isQryHistory);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, startTimeOfHistory);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, endTimeOfHistory);
        return h_;
    }

    public DCGetLscpWarningsReq clone()
    {
        DCGetLscpWarningsReq c = null;
        try
        {
            c = (DCGetLscpWarningsReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeBool(this.isOrdeByTimeDesc);
        ostr.writeBool(this.isQryAll);
        ostr.writeLongSeq(this.uuids);
        ostr.writeBool(this.isQryHistory);
        ostr.writeLong(this.startTimeOfHistory);
        ostr.writeLong(this.endTimeOfHistory);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.isOrdeByTimeDesc = istr.readBool();
        this.isQryAll = istr.readBool();
        this.uuids = istr.readLongSeq();
        this.isQryHistory = istr.readBool();
        this.startTimeOfHistory = istr.readLong();
        this.endTimeOfHistory = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCGetLscpWarningsReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCGetLscpWarningsReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCGetLscpWarningsReq v = new DCGetLscpWarningsReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCGetLscpWarningsReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCGetLscpWarningsReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DCGetLscpWarningsReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DCGetLscpWarningsReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCGetLscpWarningsReq _nullMarshalValue = new DCGetLscpWarningsReq();

    public static final long serialVersionUID = -755066893L;
}
