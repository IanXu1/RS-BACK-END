// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEPagedQuey.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class PagedQueyResult implements Cloneable,
                                        java.io.Serializable
{
    public int total;

    public int getTotal()
    {
        return total;
    }

    public void setTotal(int total)
    {
        this.total = total;
    }

    public int idListSize;

    public int getIdListSize()
    {
        return idListSize;
    }

    public void setIdListSize(int idListSize)
    {
        this.idListSize = idListSize;
    }

    public long[] idList;

    public long[] getIdList()
    {
        return idList;
    }

    public void setIdList(long[] idList)
    {
        this.idList = idList;
    }

    public long getIdList(int index)
    {
        return this.idList[index];
    }

    public void setIdList(int index, long val)
    {
        this.idList[index] = val;
    }

    public PagedQueyResult()
    {
        this.total = 0;
        this.idListSize = 0;
    }

    public PagedQueyResult(int total, int idListSize, long[] idList)
    {
        this.total = total;
        this.idListSize = idListSize;
        this.idList = idList;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PagedQueyResult r = null;
        if(rhs instanceof PagedQueyResult)
        {
            r = (PagedQueyResult)rhs;
        }

        if(r != null)
        {
            if(this.total != r.total)
            {
                return false;
            }
            if(this.idListSize != r.idListSize)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.idList, r.idList))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::PagedQueyResult");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, total);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idListSize);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idList);
        return h_;
    }

    public PagedQueyResult clone()
    {
        PagedQueyResult c = null;
        try
        {
            c = (PagedQueyResult)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.total);
        ostr.writeInt(this.idListSize);
        ostr.writeLongSeq(this.idList);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.total = istr.readInt();
        this.idListSize = istr.readInt();
        this.idList = istr.readLongSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, PagedQueyResult v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public PagedQueyResult ice_read(com.zeroc.Ice.InputStream istr)
    {
        PagedQueyResult v = new PagedQueyResult();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<PagedQueyResult> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, PagedQueyResult v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<PagedQueyResult> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(PagedQueyResult.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final PagedQueyResult _nullMarshalValue = new PagedQueyResult();

    public static final long serialVersionUID = -1865041060L;
}
