// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEELscpProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class LscpGetSaltResp implements Cloneable,
                                        java.io.Serializable
{
    public String usrname;

    public String getUsrname()
    {
        return usrname;
    }

    public void setUsrname(String usrname)
    {
        this.usrname = usrname;
    }

    public LscpErrorCode lscpErrorCode;

    public LscpErrorCode getLscpErrorCode()
    {
        return lscpErrorCode;
    }

    public void setLscpErrorCode(LscpErrorCode lscpErrorCode)
    {
        this.lscpErrorCode = lscpErrorCode;
    }

    public String publicKey;

    public String getPublicKey()
    {
        return publicKey;
    }

    public void setPublicKey(String publicKey)
    {
        this.publicKey = publicKey;
    }

    public LscpGetSaltResp()
    {
        this.usrname = "";
        this.lscpErrorCode = LscpErrorCode.TEEE_OK_SVERVER;
        this.publicKey = "";
    }

    public LscpGetSaltResp(String usrname, LscpErrorCode lscpErrorCode, String publicKey)
    {
        this.usrname = usrname;
        this.lscpErrorCode = lscpErrorCode;
        this.publicKey = publicKey;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LscpGetSaltResp r = null;
        if(rhs instanceof LscpGetSaltResp)
        {
            r = (LscpGetSaltResp)rhs;
        }

        if(r != null)
        {
            if(this.usrname != r.usrname)
            {
                if(this.usrname == null || r.usrname == null || !this.usrname.equals(r.usrname))
                {
                    return false;
                }
            }
            if(this.lscpErrorCode != r.lscpErrorCode)
            {
                if(this.lscpErrorCode == null || r.lscpErrorCode == null || !this.lscpErrorCode.equals(r.lscpErrorCode))
                {
                    return false;
                }
            }
            if(this.publicKey != r.publicKey)
            {
                if(this.publicKey == null || r.publicKey == null || !this.publicKey.equals(r.publicKey))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::LscpGetSaltResp");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, usrname);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lscpErrorCode);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, publicKey);
        return h_;
    }

    public LscpGetSaltResp clone()
    {
        LscpGetSaltResp c = null;
        try
        {
            c = (LscpGetSaltResp)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.usrname);
        LscpErrorCode.ice_write(ostr, this.lscpErrorCode);
        ostr.writeString(this.publicKey);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.usrname = istr.readString();
        this.lscpErrorCode = LscpErrorCode.ice_read(istr);
        this.publicKey = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LscpGetSaltResp v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LscpGetSaltResp ice_read(com.zeroc.Ice.InputStream istr)
    {
        LscpGetSaltResp v = new LscpGetSaltResp();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LscpGetSaltResp> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LscpGetSaltResp v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LscpGetSaltResp> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LscpGetSaltResp.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LscpGetSaltResp _nullMarshalValue = new LscpGetSaltResp();

    public static final long serialVersionUID = 281355845L;
}
