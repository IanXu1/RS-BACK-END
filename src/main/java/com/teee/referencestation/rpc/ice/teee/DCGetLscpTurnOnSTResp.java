// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCExtd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCGetLscpTurnOnSTResp implements Cloneable,
                                              java.io.Serializable
{
    public java.util.Map<Long, Long> uuids;

    public java.util.Map<Long, Long> getUuids()
    {
        return uuids;
    }

    public void setUuids(java.util.Map<Long, Long> uuids)
    {
        this.uuids = uuids;
    }

    public DCGetLscpTurnOnSTResp()
    {
    }

    public DCGetLscpTurnOnSTResp(java.util.Map<Long, Long> uuids)
    {
        this.uuids = uuids;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCGetLscpTurnOnSTResp r = null;
        if(rhs instanceof DCGetLscpTurnOnSTResp)
        {
            r = (DCGetLscpTurnOnSTResp)rhs;
        }

        if(r != null)
        {
            if(this.uuids != r.uuids)
            {
                if(this.uuids == null || r.uuids == null || !this.uuids.equals(r.uuids))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCGetLscpTurnOnSTResp");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, uuids);
        return h_;
    }

    public DCGetLscpTurnOnSTResp clone()
    {
        DCGetLscpTurnOnSTResp c = null;
        try
        {
            c = (DCGetLscpTurnOnSTResp)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        LongLongDictHelper.write(ostr, this.uuids);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.uuids = LongLongDictHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCGetLscpTurnOnSTResp v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCGetLscpTurnOnSTResp ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCGetLscpTurnOnSTResp v = new DCGetLscpTurnOnSTResp();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCGetLscpTurnOnSTResp> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCGetLscpTurnOnSTResp v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DCGetLscpTurnOnSTResp> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DCGetLscpTurnOnSTResp.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCGetLscpTurnOnSTResp _nullMarshalValue = new DCGetLscpTurnOnSTResp();

    public static final long serialVersionUID = 635468401L;
}
