// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEIdInfo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class IdInfo implements Cloneable,
                               java.io.Serializable
{
    public long uuid;

    public long getUuid()
    {
        return uuid;
    }

    public void setUuid(long uuid)
    {
        this.uuid = uuid;
    }

    public IDType idType;

    public IDType getIdType()
    {
        return idType;
    }

    public void setIdType(IDType idType)
    {
        this.idType = idType;
    }

    public String id;

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    public IdInfo()
    {
        this.uuid = 0L;
        this.idType = IDType.E_IDTYPE_ERROR;
        this.id = "";
    }

    public IdInfo(long uuid, IDType idType, String id)
    {
        this.uuid = uuid;
        this.idType = idType;
        this.id = id;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        IdInfo r = null;
        if(rhs instanceof IdInfo)
        {
            r = (IdInfo)rhs;
        }

        if(r != null)
        {
            if(this.uuid != r.uuid)
            {
                return false;
            }
            if(this.idType != r.idType)
            {
                if(this.idType == null || r.idType == null || !this.idType.equals(r.idType))
                {
                    return false;
                }
            }
            if(this.id != r.id)
            {
                if(this.id == null || r.id == null || !this.id.equals(r.id))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::IdInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, uuid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        return h_;
    }

    public IdInfo clone()
    {
        IdInfo c = null;
        try
        {
            c = (IdInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.uuid);
        IDType.ice_write(ostr, this.idType);
        ostr.writeString(this.id);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.uuid = istr.readLong();
        this.idType = IDType.ice_read(istr);
        this.id = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, IdInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public IdInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        IdInfo v = new IdInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<IdInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, IdInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<IdInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(IdInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final IdInfo _nullMarshalValue = new IdInfo();

    public static final long serialVersionUID = 2023929387L;
}
