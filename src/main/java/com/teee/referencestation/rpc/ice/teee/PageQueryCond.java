// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEPagedQuey.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class PageQueryCond implements Cloneable,
                                      java.io.Serializable
{
    public boolean isFirstBatch;

    public boolean getIsFirstBatch()
    {
        return isFirstBatch;
    }

    public void setIsFirstBatch(boolean isFirstBatch)
    {
        this.isFirstBatch = isFirstBatch;
    }

    public boolean isIsFirstBatch()
    {
        return isFirstBatch;
    }

    public int numOfFirstBatch;

    public int getNumOfFirstBatch()
    {
        return numOfFirstBatch;
    }

    public void setNumOfFirstBatch(int numOfFirstBatch)
    {
        this.numOfFirstBatch = numOfFirstBatch;
    }

    public WhereCond[] whereCondSeq;

    public WhereCond[] getWhereCondSeq()
    {
        return whereCondSeq;
    }

    public void setWhereCondSeq(WhereCond[] whereCondSeq)
    {
        this.whereCondSeq = whereCondSeq;
    }

    public WhereCond getWhereCondSeq(int index)
    {
        return this.whereCondSeq[index];
    }

    public void setWhereCondSeq(int index, WhereCond val)
    {
        this.whereCondSeq[index] = val;
    }

    public OrderByPair[] orderByPairSeq;

    public OrderByPair[] getOrderByPairSeq()
    {
        return orderByPairSeq;
    }

    public void setOrderByPairSeq(OrderByPair[] orderByPairSeq)
    {
        this.orderByPairSeq = orderByPairSeq;
    }

    public OrderByPair getOrderByPairSeq(int index)
    {
        return this.orderByPairSeq[index];
    }

    public void setOrderByPairSeq(int index, OrderByPair val)
    {
        this.orderByPairSeq[index] = val;
    }

    public long[] limits;

    public long[] getLimits()
    {
        return limits;
    }

    public void setLimits(long[] limits)
    {
        this.limits = limits;
    }

    public long getLimits(int index)
    {
        return this.limits[index];
    }

    public void setLimits(int index, long val)
    {
        this.limits[index] = val;
    }

    public PageQueryCond()
    {
        this.isFirstBatch = false;
        this.numOfFirstBatch = 10000;
    }

    public PageQueryCond(boolean isFirstBatch, int numOfFirstBatch, WhereCond[] whereCondSeq, OrderByPair[] orderByPairSeq, long[] limits)
    {
        this.isFirstBatch = isFirstBatch;
        this.numOfFirstBatch = numOfFirstBatch;
        this.whereCondSeq = whereCondSeq;
        this.orderByPairSeq = orderByPairSeq;
        this.limits = limits;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PageQueryCond r = null;
        if(rhs instanceof PageQueryCond)
        {
            r = (PageQueryCond)rhs;
        }

        if(r != null)
        {
            if(this.isFirstBatch != r.isFirstBatch)
            {
                return false;
            }
            if(this.numOfFirstBatch != r.numOfFirstBatch)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.whereCondSeq, r.whereCondSeq))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.orderByPairSeq, r.orderByPairSeq))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.limits, r.limits))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::PageQueryCond");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isFirstBatch);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, numOfFirstBatch);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, whereCondSeq);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, orderByPairSeq);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, limits);
        return h_;
    }

    public PageQueryCond clone()
    {
        PageQueryCond c = null;
        try
        {
            c = (PageQueryCond)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeBool(this.isFirstBatch);
        ostr.writeInt(this.numOfFirstBatch);
        WhereCondSeqHelper.write(ostr, this.whereCondSeq);
        OrderByPairSeqHelper.write(ostr, this.orderByPairSeq);
        ostr.writeLongSeq(this.limits);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.isFirstBatch = istr.readBool();
        this.numOfFirstBatch = istr.readInt();
        this.whereCondSeq = WhereCondSeqHelper.read(istr);
        this.orderByPairSeq = OrderByPairSeqHelper.read(istr);
        this.limits = istr.readLongSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, PageQueryCond v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public PageQueryCond ice_read(com.zeroc.Ice.InputStream istr)
    {
        PageQueryCond v = new PageQueryCond();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<PageQueryCond> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, PageQueryCond v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<PageQueryCond> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(PageQueryCond.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final PageQueryCond _nullMarshalValue = new PageQueryCond();

    public static final long serialVersionUID = -983511147L;
}
