// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCExtd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCLockOpReq implements Cloneable,
                                    java.io.Serializable
{
    public long id;

    public long getId()
    {
        return id;
    }

    public void setId(long id)
    {
        this.id = id;
    }

    public boolean isLock;

    public boolean getIsLock()
    {
        return isLock;
    }

    public void setIsLock(boolean isLock)
    {
        this.isLock = isLock;
    }

    public boolean isIsLock()
    {
        return isLock;
    }

    public DCLockOpReq()
    {
        this.id = 0L;
        this.isLock = false;
    }

    public DCLockOpReq(long id, boolean isLock)
    {
        this.id = id;
        this.isLock = isLock;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCLockOpReq r = null;
        if(rhs instanceof DCLockOpReq)
        {
            r = (DCLockOpReq)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                return false;
            }
            if(this.isLock != r.isLock)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCLockOpReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isLock);
        return h_;
    }

    public DCLockOpReq clone()
    {
        DCLockOpReq c = null;
        try
        {
            c = (DCLockOpReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.id);
        ostr.writeBool(this.isLock);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readLong();
        this.isLock = istr.readBool();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCLockOpReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCLockOpReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCLockOpReq v = new DCLockOpReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCLockOpReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCLockOpReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(9);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<DCLockOpReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(DCLockOpReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCLockOpReq _nullMarshalValue = new DCLockOpReq();

    public static final long serialVersionUID = -180620173L;
}
