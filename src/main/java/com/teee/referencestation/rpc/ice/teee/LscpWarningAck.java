// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEELscpProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class LscpWarningAck implements Cloneable,
                                       java.io.Serializable
{
    public LscpUniqSNo lscpUniqSNo;

    public LscpUniqSNo getLscpUniqSNo()
    {
        return lscpUniqSNo;
    }

    public void setLscpUniqSNo(LscpUniqSNo lscpUniqSNo)
    {
        this.lscpUniqSNo = lscpUniqSNo;
    }

    public LscpWarningAck()
    {
        this.lscpUniqSNo = new LscpUniqSNo();
    }

    public LscpWarningAck(LscpUniqSNo lscpUniqSNo)
    {
        this.lscpUniqSNo = lscpUniqSNo;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LscpWarningAck r = null;
        if(rhs instanceof LscpWarningAck)
        {
            r = (LscpWarningAck)rhs;
        }

        if(r != null)
        {
            if(this.lscpUniqSNo != r.lscpUniqSNo)
            {
                if(this.lscpUniqSNo == null || r.lscpUniqSNo == null || !this.lscpUniqSNo.equals(r.lscpUniqSNo))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::LscpWarningAck");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lscpUniqSNo);
        return h_;
    }

    public LscpWarningAck clone()
    {
        LscpWarningAck c = null;
        try
        {
            c = (LscpWarningAck)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        LscpUniqSNo.ice_write(ostr, this.lscpUniqSNo);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.lscpUniqSNo = LscpUniqSNo.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LscpWarningAck v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LscpWarningAck ice_read(com.zeroc.Ice.InputStream istr)
    {
        LscpWarningAck v = new LscpWarningAck();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LscpWarningAck> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LscpWarningAck v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(24);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<LscpWarningAck> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(LscpWarningAck.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LscpWarningAck _nullMarshalValue = new LscpWarningAck();

    public static final long serialVersionUID = -1841010801L;
}
