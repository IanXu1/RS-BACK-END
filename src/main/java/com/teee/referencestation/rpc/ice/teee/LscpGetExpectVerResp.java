// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEELscpProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class LscpGetExpectVerResp implements Cloneable,
                                             java.io.Serializable
{
    public String[] fileKeys;

    public String[] getFileKeys()
    {
        return fileKeys;
    }

    public void setFileKeys(String[] fileKeys)
    {
        this.fileKeys = fileKeys;
    }

    public String getFileKeys(int index)
    {
        return this.fileKeys[index];
    }

    public void setFileKeys(int index, String val)
    {
        this.fileKeys[index] = val;
    }

    public LscpGetExpectVerResp()
    {
    }

    public LscpGetExpectVerResp(String[] fileKeys)
    {
        this.fileKeys = fileKeys;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LscpGetExpectVerResp r = null;
        if(rhs instanceof LscpGetExpectVerResp)
        {
            r = (LscpGetExpectVerResp)rhs;
        }

        if(r != null)
        {
            if(!java.util.Arrays.equals(this.fileKeys, r.fileKeys))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::LscpGetExpectVerResp");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileKeys);
        return h_;
    }

    public LscpGetExpectVerResp clone()
    {
        LscpGetExpectVerResp c = null;
        try
        {
            c = (LscpGetExpectVerResp)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeStringSeq(this.fileKeys);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.fileKeys = istr.readStringSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LscpGetExpectVerResp v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LscpGetExpectVerResp ice_read(com.zeroc.Ice.InputStream istr)
    {
        LscpGetExpectVerResp v = new LscpGetExpectVerResp();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LscpGetExpectVerResp> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LscpGetExpectVerResp v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LscpGetExpectVerResp> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LscpGetExpectVerResp.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LscpGetExpectVerResp _nullMarshalValue = new LscpGetExpectVerResp();

    public static final long serialVersionUID = 13501391L;
}
