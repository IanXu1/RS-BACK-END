// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEELscpProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public enum LscpCmd implements java.io.Serializable
{
    FRMTYPE_REG_NO_AUTH(257),
    FRMTYPE_REG_GET_AUTH(258),
    FRMTYPE_REG_WITH_AUTH(259),
    FRMTYPE_REG_ACK(260),
    FRMTYPE_REG_HEARTBEAT_2SERVRE(272),
    FRMTYPE_REG_HEARTBEAT_2DEVICE(273),
    FRMTYPE_REG_HEARTBEAT_INTERDEV(274),
    FRMTYPE_GET_EXPECT_VER(288),
    FRMTYPE_REPORT_LATEST_VER(289),
    FRMTYPE_NTF_UPGRADE(290),
    FRMTYPE_GET_FILE(304),
    FRMTYPE_SEND_FILE(305),
    FRMTYPE_FILE_UPGRADE_RESULT(306),
    FRMTYPE_REMOTE_DBG_CMD(320),
    FRMTYPE_REMOTE_DBG_ECHO(321),
    FRMTYPE_DEVICE_TRUSTSEND(336),
    FRMTYPE_DEVICE_TRUSTSEND_REPLY(337);

    public int value()
    {
        return _value;
    }

    public static LscpCmd valueOf(int v)
    {
        switch(v)
        {
        case 257:
            return FRMTYPE_REG_NO_AUTH;
        case 258:
            return FRMTYPE_REG_GET_AUTH;
        case 259:
            return FRMTYPE_REG_WITH_AUTH;
        case 260:
            return FRMTYPE_REG_ACK;
        case 272:
            return FRMTYPE_REG_HEARTBEAT_2SERVRE;
        case 273:
            return FRMTYPE_REG_HEARTBEAT_2DEVICE;
        case 274:
            return FRMTYPE_REG_HEARTBEAT_INTERDEV;
        case 288:
            return FRMTYPE_GET_EXPECT_VER;
        case 289:
            return FRMTYPE_REPORT_LATEST_VER;
        case 290:
            return FRMTYPE_NTF_UPGRADE;
        case 304:
            return FRMTYPE_GET_FILE;
        case 305:
            return FRMTYPE_SEND_FILE;
        case 306:
            return FRMTYPE_FILE_UPGRADE_RESULT;
        case 320:
            return FRMTYPE_REMOTE_DBG_CMD;
        case 321:
            return FRMTYPE_REMOTE_DBG_ECHO;
        case 336:
            return FRMTYPE_DEVICE_TRUSTSEND;
        case 337:
            return FRMTYPE_DEVICE_TRUSTSEND_REPLY;
        }
        return null;
    }

    private LscpCmd(int v)
    {
        _value = v;
    }

    public void ice_write(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeEnum(_value, 337);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, LscpCmd v)
    {
        if(v == null)
        {
            ostr.writeEnum(LscpCmd.FRMTYPE_REG_NO_AUTH.value(), 337);
        }
        else
        {
            ostr.writeEnum(v.value(), 337);
        }
    }

    public static LscpCmd ice_read(com.zeroc.Ice.InputStream istr)
    {
        int v = istr.readEnum(337);
        return validate(v);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LscpCmd> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LscpCmd v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            ice_write(ostr, v);
        }
    }

    public static java.util.Optional<LscpCmd> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            return java.util.Optional.of(ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static LscpCmd validate(int v)
    {
        final LscpCmd e = valueOf(v);
        if(e == null)
        {
            throw new com.zeroc.Ice.MarshalException("enumerator value " + v + " is out of range");
        }
        return e;
    }

    private final int _value;
}
