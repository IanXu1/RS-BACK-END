// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEERPCHeader.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class RPCHeader implements Cloneable,
                                  java.io.Serializable
{
    public String reqNo;

    public String getReqNo()
    {
        return reqNo;
    }

    public void setReqNo(String reqNo)
    {
        this.reqNo = reqNo;
    }

    public long reqTimeStamp;

    public long getReqTimeStamp()
    {
        return reqTimeStamp;
    }

    public void setReqTimeStamp(long reqTimeStamp)
    {
        this.reqTimeStamp = reqTimeStamp;
    }

    public long respTimeStamp;

    public long getRespTimeStamp()
    {
        return respTimeStamp;
    }

    public void setRespTimeStamp(long respTimeStamp)
    {
        this.respTimeStamp = respTimeStamp;
    }

    public CallChainLog callChainLog;

    public CallChainLog getCallChainLog()
    {
        return callChainLog;
    }

    public void setCallChainLog(CallChainLog callChainLog)
    {
        this.callChainLog = callChainLog;
    }

    public IdInfo idInfo;

    public IdInfo getIdInfo()
    {
        return idInfo;
    }

    public void setIdInfo(IdInfo idInfo)
    {
        this.idInfo = idInfo;
    }

    public String session;

    public String getSession()
    {
        return session;
    }

    public void setSession(String session)
    {
        this.session = session;
    }

    public String ver;

    public String getVer()
    {
        return ver;
    }

    public void setVer(String ver)
    {
        this.ver = ver;
    }

    public int retCode;

    public int getRetCode()
    {
        return retCode;
    }

    public void setRetCode(int retCode)
    {
        this.retCode = retCode;
    }

    public String retMsg;

    public String getRetMsg()
    {
        return retMsg;
    }

    public void setRetMsg(String retMsg)
    {
        this.retMsg = retMsg;
    }

    public RPCHeader()
    {
        this.reqNo = "setreqno";
        this.reqTimeStamp = 0L;
        this.respTimeStamp = 0L;
        this.callChainLog = new CallChainLog();
        this.idInfo = new IdInfo();
        this.session = "";
        this.ver = "v1.0";
        this.retCode = 0;
        this.retMsg = "SUCCESS";
    }

    public RPCHeader(String reqNo, long reqTimeStamp, long respTimeStamp, CallChainLog callChainLog, IdInfo idInfo, String session, String ver, int retCode, String retMsg)
    {
        this.reqNo = reqNo;
        this.reqTimeStamp = reqTimeStamp;
        this.respTimeStamp = respTimeStamp;
        this.callChainLog = callChainLog;
        this.idInfo = idInfo;
        this.session = session;
        this.ver = ver;
        this.retCode = retCode;
        this.retMsg = retMsg;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RPCHeader r = null;
        if(rhs instanceof RPCHeader)
        {
            r = (RPCHeader)rhs;
        }

        if(r != null)
        {
            if(this.reqNo != r.reqNo)
            {
                if(this.reqNo == null || r.reqNo == null || !this.reqNo.equals(r.reqNo))
                {
                    return false;
                }
            }
            if(this.reqTimeStamp != r.reqTimeStamp)
            {
                return false;
            }
            if(this.respTimeStamp != r.respTimeStamp)
            {
                return false;
            }
            if(this.callChainLog != r.callChainLog)
            {
                if(this.callChainLog == null || r.callChainLog == null || !this.callChainLog.equals(r.callChainLog))
                {
                    return false;
                }
            }
            if(this.idInfo != r.idInfo)
            {
                if(this.idInfo == null || r.idInfo == null || !this.idInfo.equals(r.idInfo))
                {
                    return false;
                }
            }
            if(this.session != r.session)
            {
                if(this.session == null || r.session == null || !this.session.equals(r.session))
                {
                    return false;
                }
            }
            if(this.ver != r.ver)
            {
                if(this.ver == null || r.ver == null || !this.ver.equals(r.ver))
                {
                    return false;
                }
            }
            if(this.retCode != r.retCode)
            {
                return false;
            }
            if(this.retMsg != r.retMsg)
            {
                if(this.retMsg == null || r.retMsg == null || !this.retMsg.equals(r.retMsg))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::RPCHeader");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, reqNo);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, reqTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, respTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, callChainLog);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idInfo);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, session);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ver);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, retCode);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, retMsg);
        return h_;
    }

    public RPCHeader clone()
    {
        RPCHeader c = null;
        try
        {
            c = (RPCHeader)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.reqNo);
        ostr.writeLong(this.reqTimeStamp);
        ostr.writeLong(this.respTimeStamp);
        CallChainLog.ice_write(ostr, this.callChainLog);
        IdInfo.ice_write(ostr, this.idInfo);
        ostr.writeString(this.session);
        ostr.writeString(this.ver);
        ostr.writeInt(this.retCode);
        ostr.writeString(this.retMsg);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.reqNo = istr.readString();
        this.reqTimeStamp = istr.readLong();
        this.respTimeStamp = istr.readLong();
        this.callChainLog = CallChainLog.ice_read(istr);
        this.idInfo = IdInfo.ice_read(istr);
        this.session = istr.readString();
        this.ver = istr.readString();
        this.retCode = istr.readInt();
        this.retMsg = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, RPCHeader v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public RPCHeader ice_read(com.zeroc.Ice.InputStream istr)
    {
        RPCHeader v = new RPCHeader();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<RPCHeader> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, RPCHeader v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<RPCHeader> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(RPCHeader.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final RPCHeader _nullMarshalValue = new RPCHeader();

    public static final long serialVersionUID = 323589781L;
}
