// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCCURD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCPagedQueryReq implements Cloneable,
                                        java.io.Serializable
{
    public RPCHeader rpcHeader;

    public RPCHeader getRpcHeader()
    {
        return rpcHeader;
    }

    public void setRpcHeader(RPCHeader rpcHeader)
    {
        this.rpcHeader = rpcHeader;
    }

    public DCTableType dcTableType;

    public DCTableType getDcTableType()
    {
        return dcTableType;
    }

    public void setDcTableType(DCTableType dcTableType)
    {
        this.dcTableType = dcTableType;
    }

    public PageQueryCond pageQueryCond;

    public PageQueryCond getPageQueryCond()
    {
        return pageQueryCond;
    }

    public void setPageQueryCond(PageQueryCond pageQueryCond)
    {
        this.pageQueryCond = pageQueryCond;
    }

    public DCPagedQueryReq()
    {
        this.rpcHeader = new RPCHeader();
        this.dcTableType = DCTableType.E_TABLE_ERROR;
        this.pageQueryCond = new PageQueryCond();
    }

    public DCPagedQueryReq(RPCHeader rpcHeader, DCTableType dcTableType, PageQueryCond pageQueryCond)
    {
        this.rpcHeader = rpcHeader;
        this.dcTableType = dcTableType;
        this.pageQueryCond = pageQueryCond;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCPagedQueryReq r = null;
        if(rhs instanceof DCPagedQueryReq)
        {
            r = (DCPagedQueryReq)rhs;
        }

        if(r != null)
        {
            if(this.rpcHeader != r.rpcHeader)
            {
                if(this.rpcHeader == null || r.rpcHeader == null || !this.rpcHeader.equals(r.rpcHeader))
                {
                    return false;
                }
            }
            if(this.dcTableType != r.dcTableType)
            {
                if(this.dcTableType == null || r.dcTableType == null || !this.dcTableType.equals(r.dcTableType))
                {
                    return false;
                }
            }
            if(this.pageQueryCond != r.pageQueryCond)
            {
                if(this.pageQueryCond == null || r.pageQueryCond == null || !this.pageQueryCond.equals(r.pageQueryCond))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCPagedQueryReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, rpcHeader);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dcTableType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pageQueryCond);
        return h_;
    }

    public DCPagedQueryReq clone()
    {
        DCPagedQueryReq c = null;
        try
        {
            c = (DCPagedQueryReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        RPCHeader.ice_write(ostr, this.rpcHeader);
        DCTableType.ice_write(ostr, this.dcTableType);
        PageQueryCond.ice_write(ostr, this.pageQueryCond);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.rpcHeader = RPCHeader.ice_read(istr);
        this.dcTableType = DCTableType.ice_read(istr);
        this.pageQueryCond = PageQueryCond.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCPagedQueryReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCPagedQueryReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCPagedQueryReq v = new DCPagedQueryReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCPagedQueryReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCPagedQueryReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DCPagedQueryReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DCPagedQueryReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCPagedQueryReq _nullMarshalValue = new DCPagedQueryReq();

    public static final long serialVersionUID = 9081409L;
}
