// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCExtd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCPostionStatus implements Cloneable,
                                        java.io.Serializable
{
    public boolean isValid;

    public boolean getIsValid()
    {
        return isValid;
    }

    public void setIsValid(boolean isValid)
    {
        this.isValid = isValid;
    }

    public boolean isIsValid()
    {
        return isValid;
    }

    public Position latestPosition;

    public Position getLatestPosition()
    {
        return latestPosition;
    }

    public void setLatestPosition(Position latestPosition)
    {
        this.latestPosition = latestPosition;
    }

    public long latestReportPostionTime;

    public long getLatestReportPostionTime()
    {
        return latestReportPostionTime;
    }

    public void setLatestReportPostionTime(long latestReportPostionTime)
    {
        this.latestReportPostionTime = latestReportPostionTime;
    }

    public DCPostionStatus()
    {
        this.isValid = true;
        this.latestPosition = new Position();
        this.latestReportPostionTime = 0L;
    }

    public DCPostionStatus(boolean isValid, Position latestPosition, long latestReportPostionTime)
    {
        this.isValid = isValid;
        this.latestPosition = latestPosition;
        this.latestReportPostionTime = latestReportPostionTime;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCPostionStatus r = null;
        if(rhs instanceof DCPostionStatus)
        {
            r = (DCPostionStatus)rhs;
        }

        if(r != null)
        {
            if(this.isValid != r.isValid)
            {
                return false;
            }
            if(this.latestPosition != r.latestPosition)
            {
                if(this.latestPosition == null || r.latestPosition == null || !this.latestPosition.equals(r.latestPosition))
                {
                    return false;
                }
            }
            if(this.latestReportPostionTime != r.latestReportPostionTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCPostionStatus");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isValid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, latestPosition);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, latestReportPostionTime);
        return h_;
    }

    public DCPostionStatus clone()
    {
        DCPostionStatus c = null;
        try
        {
            c = (DCPostionStatus)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeBool(this.isValid);
        Position.ice_write(ostr, this.latestPosition);
        ostr.writeLong(this.latestReportPostionTime);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.isValid = istr.readBool();
        this.latestPosition = Position.ice_read(istr);
        this.latestReportPostionTime = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCPostionStatus v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCPostionStatus ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCPostionStatus v = new DCPostionStatus();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCPostionStatus> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCPostionStatus v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(33);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<DCPostionStatus> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(DCPostionStatus.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCPostionStatus _nullMarshalValue = new DCPostionStatus();

    public static final long serialVersionUID = -2079724128L;
}
