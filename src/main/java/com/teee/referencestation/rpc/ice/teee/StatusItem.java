// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEStatus.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class StatusItem implements Cloneable,
                                   java.io.Serializable
{
    public IdInfo id;

    public IdInfo getId()
    {
        return id;
    }

    public void setId(IdInfo id)
    {
        this.id = id;
    }

    public String username;

    public String getUsername()
    {
        return username;
    }

    public void setUsername(String username)
    {
        this.username = username;
    }

    public String accIp;

    public String getAccIp()
    {
        return accIp;
    }

    public void setAccIp(String accIp)
    {
        this.accIp = accIp;
    }

    public int accPort;

    public int getAccPort()
    {
        return accPort;
    }

    public void setAccPort(int accPort)
    {
        this.accPort = accPort;
    }

    public String clientIp;

    public String getClientIp()
    {
        return clientIp;
    }

    public void setClientIp(String clientIp)
    {
        this.clientIp = clientIp;
    }

    public int clientPort;

    public int getClientPort()
    {
        return clientPort;
    }

    public void setClientPort(int clientPort)
    {
        this.clientPort = clientPort;
    }

    public String version;

    public String getVersion()
    {
        return version;
    }

    public void setVersion(String version)
    {
        this.version = version;
    }

    public StatusType statusType;

    public StatusType getStatusType()
    {
        return statusType;
    }

    public void setStatusType(StatusType statusType)
    {
        this.statusType = statusType;
    }

    public long latestLoginTime;

    public long getLatestLoginTime()
    {
        return latestLoginTime;
    }

    public void setLatestLoginTime(long latestLoginTime)
    {
        this.latestLoginTime = latestLoginTime;
    }

    public long latestLoginOutTime;

    public long getLatestLoginOutTime()
    {
        return latestLoginOutTime;
    }

    public void setLatestLoginOutTime(long latestLoginOutTime)
    {
        this.latestLoginOutTime = latestLoginOutTime;
    }

    public long latestHeartBeatTime;

    public long getLatestHeartBeatTime()
    {
        return latestHeartBeatTime;
    }

    public void setLatestHeartBeatTime(long latestHeartBeatTime)
    {
        this.latestHeartBeatTime = latestHeartBeatTime;
    }

    public StatusItem()
    {
        this.id = new IdInfo();
        this.username = "";
        this.accIp = "";
        this.clientIp = "";
        this.version = "";
        this.statusType = StatusType.E_STATUS_NONE;
        this.latestLoginTime = 0L;
        this.latestLoginOutTime = 0L;
        this.latestHeartBeatTime = 0L;
    }

    public StatusItem(IdInfo id, String username, String accIp, int accPort, String clientIp, int clientPort, String version, StatusType statusType, long latestLoginTime, long latestLoginOutTime, long latestHeartBeatTime)
    {
        this.id = id;
        this.username = username;
        this.accIp = accIp;
        this.accPort = accPort;
        this.clientIp = clientIp;
        this.clientPort = clientPort;
        this.version = version;
        this.statusType = statusType;
        this.latestLoginTime = latestLoginTime;
        this.latestLoginOutTime = latestLoginOutTime;
        this.latestHeartBeatTime = latestHeartBeatTime;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        StatusItem r = null;
        if(rhs instanceof StatusItem)
        {
            r = (StatusItem)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                if(this.id == null || r.id == null || !this.id.equals(r.id))
                {
                    return false;
                }
            }
            if(this.username != r.username)
            {
                if(this.username == null || r.username == null || !this.username.equals(r.username))
                {
                    return false;
                }
            }
            if(this.accIp != r.accIp)
            {
                if(this.accIp == null || r.accIp == null || !this.accIp.equals(r.accIp))
                {
                    return false;
                }
            }
            if(this.accPort != r.accPort)
            {
                return false;
            }
            if(this.clientIp != r.clientIp)
            {
                if(this.clientIp == null || r.clientIp == null || !this.clientIp.equals(r.clientIp))
                {
                    return false;
                }
            }
            if(this.clientPort != r.clientPort)
            {
                return false;
            }
            if(this.version != r.version)
            {
                if(this.version == null || r.version == null || !this.version.equals(r.version))
                {
                    return false;
                }
            }
            if(this.statusType != r.statusType)
            {
                if(this.statusType == null || r.statusType == null || !this.statusType.equals(r.statusType))
                {
                    return false;
                }
            }
            if(this.latestLoginTime != r.latestLoginTime)
            {
                return false;
            }
            if(this.latestLoginOutTime != r.latestLoginOutTime)
            {
                return false;
            }
            if(this.latestHeartBeatTime != r.latestHeartBeatTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::StatusItem");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, username);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, accIp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, accPort);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, clientIp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, clientPort);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, version);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, statusType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, latestLoginTime);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, latestLoginOutTime);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, latestHeartBeatTime);
        return h_;
    }

    public StatusItem clone()
    {
        StatusItem c = null;
        try
        {
            c = (StatusItem)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        IdInfo.ice_write(ostr, this.id);
        ostr.writeString(this.username);
        ostr.writeString(this.accIp);
        ostr.writeInt(this.accPort);
        ostr.writeString(this.clientIp);
        ostr.writeInt(this.clientPort);
        ostr.writeString(this.version);
        StatusType.ice_write(ostr, this.statusType);
        ostr.writeLong(this.latestLoginTime);
        ostr.writeLong(this.latestLoginOutTime);
        ostr.writeLong(this.latestHeartBeatTime);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = IdInfo.ice_read(istr);
        this.username = istr.readString();
        this.accIp = istr.readString();
        this.accPort = istr.readInt();
        this.clientIp = istr.readString();
        this.clientPort = istr.readInt();
        this.version = istr.readString();
        this.statusType = StatusType.ice_read(istr);
        this.latestLoginTime = istr.readLong();
        this.latestLoginOutTime = istr.readLong();
        this.latestHeartBeatTime = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, StatusItem v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public StatusItem ice_read(com.zeroc.Ice.InputStream istr)
    {
        StatusItem v = new StatusItem();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<StatusItem> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, StatusItem v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<StatusItem> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(StatusItem.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final StatusItem _nullMarshalValue = new StatusItem();

    public static final long serialVersionUID = -2022573591L;
}
