// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCExtd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCFatalFaultStatus implements Cloneable,
                                           java.io.Serializable
{
    public boolean isFatalFalt;

    public boolean getIsFatalFalt()
    {
        return isFatalFalt;
    }

    public void setIsFatalFalt(boolean isFatalFalt)
    {
        this.isFatalFalt = isFatalFalt;
    }

    public boolean isIsFatalFalt()
    {
        return isFatalFalt;
    }

    public String reason;

    public String getReason()
    {
        return reason;
    }

    public void setReason(String reason)
    {
        this.reason = reason;
    }

    public long latestReportTime;

    public long getLatestReportTime()
    {
        return latestReportTime;
    }

    public void setLatestReportTime(long latestReportTime)
    {
        this.latestReportTime = latestReportTime;
    }

    public DCFatalFaultStatus()
    {
        this.isFatalFalt = false;
        this.reason = "";
        this.latestReportTime = 0L;
    }

    public DCFatalFaultStatus(boolean isFatalFalt, String reason, long latestReportTime)
    {
        this.isFatalFalt = isFatalFalt;
        this.reason = reason;
        this.latestReportTime = latestReportTime;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCFatalFaultStatus r = null;
        if(rhs instanceof DCFatalFaultStatus)
        {
            r = (DCFatalFaultStatus)rhs;
        }

        if(r != null)
        {
            if(this.isFatalFalt != r.isFatalFalt)
            {
                return false;
            }
            if(this.reason != r.reason)
            {
                if(this.reason == null || r.reason == null || !this.reason.equals(r.reason))
                {
                    return false;
                }
            }
            if(this.latestReportTime != r.latestReportTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCFatalFaultStatus");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isFatalFalt);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, reason);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, latestReportTime);
        return h_;
    }

    public DCFatalFaultStatus clone()
    {
        DCFatalFaultStatus c = null;
        try
        {
            c = (DCFatalFaultStatus)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeBool(this.isFatalFalt);
        ostr.writeString(this.reason);
        ostr.writeLong(this.latestReportTime);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.isFatalFalt = istr.readBool();
        this.reason = istr.readString();
        this.latestReportTime = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCFatalFaultStatus v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCFatalFaultStatus ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCFatalFaultStatus v = new DCFatalFaultStatus();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCFatalFaultStatus> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCFatalFaultStatus v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DCFatalFaultStatus> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DCFatalFaultStatus.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCFatalFaultStatus _nullMarshalValue = new DCFatalFaultStatus();

    public static final long serialVersionUID = -616011675L;
}
