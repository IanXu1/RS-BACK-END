// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEENtripProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public enum NtripCmdType implements java.io.Serializable
{
    E_NTRIPCMDTYPE_ERROR(0),
    E_CS_CLI_GET_SOURCETABLE(1),
    E_CS_CLI_AUTH(2),
    E_CS_CLI_PUSH_GGA(3),
    E_SC_CASTER_RELAY_RTCM(10),
    E_CS_SVR_AUTH(20),
    E_CS_SVR_PUSH_RTCM(21),
    E_SC_CLI_GET_SOURCETABLE(1001),
    E_SC_CLI_AUTH(1002),
    E_SC_CLI_PUSH_GGA(1003),
    E_SC_SVR_AUTH(2020);

    public int value()
    {
        return _value;
    }

    public static NtripCmdType valueOf(int v)
    {
        switch(v)
        {
        case 0:
            return E_NTRIPCMDTYPE_ERROR;
        case 1:
            return E_CS_CLI_GET_SOURCETABLE;
        case 2:
            return E_CS_CLI_AUTH;
        case 3:
            return E_CS_CLI_PUSH_GGA;
        case 10:
            return E_SC_CASTER_RELAY_RTCM;
        case 20:
            return E_CS_SVR_AUTH;
        case 21:
            return E_CS_SVR_PUSH_RTCM;
        case 1001:
            return E_SC_CLI_GET_SOURCETABLE;
        case 1002:
            return E_SC_CLI_AUTH;
        case 1003:
            return E_SC_CLI_PUSH_GGA;
        case 2020:
            return E_SC_SVR_AUTH;
        }
        return null;
    }

    private NtripCmdType(int v)
    {
        _value = v;
    }

    public void ice_write(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeEnum(_value, 2020);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, NtripCmdType v)
    {
        if(v == null)
        {
            ostr.writeEnum(NtripCmdType.E_NTRIPCMDTYPE_ERROR.value(), 2020);
        }
        else
        {
            ostr.writeEnum(v.value(), 2020);
        }
    }

    public static NtripCmdType ice_read(com.zeroc.Ice.InputStream istr)
    {
        int v = istr.readEnum(2020);
        return validate(v);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<NtripCmdType> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, NtripCmdType v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            ice_write(ostr, v);
        }
    }

    public static java.util.Optional<NtripCmdType> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            return java.util.Optional.of(ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static NtripCmdType validate(int v)
    {
        final NtripCmdType e = valueOf(v);
        if(e == null)
        {
            throw new com.zeroc.Ice.MarshalException("enumerator value " + v + " is out of range");
        }
        return e;
    }

    private final int _value;
}
