// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEECallChainLog.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class CallChainLog implements Cloneable,
                                     java.io.Serializable
{
    public boolean isOn;

    public boolean getIsOn()
    {
        return isOn;
    }

    public void setIsOn(boolean isOn)
    {
        this.isOn = isOn;
    }

    public boolean isIsOn()
    {
        return isOn;
    }

    public ChainInfo[] chainInfoList;

    public ChainInfo[] getChainInfoList()
    {
        return chainInfoList;
    }

    public void setChainInfoList(ChainInfo[] chainInfoList)
    {
        this.chainInfoList = chainInfoList;
    }

    public ChainInfo getChainInfoList(int index)
    {
        return this.chainInfoList[index];
    }

    public void setChainInfoList(int index, ChainInfo val)
    {
        this.chainInfoList[index] = val;
    }

    public CallChainLog()
    {
        this.isOn = false;
    }

    public CallChainLog(boolean isOn, ChainInfo[] chainInfoList)
    {
        this.isOn = isOn;
        this.chainInfoList = chainInfoList;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CallChainLog r = null;
        if(rhs instanceof CallChainLog)
        {
            r = (CallChainLog)rhs;
        }

        if(r != null)
        {
            if(this.isOn != r.isOn)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.chainInfoList, r.chainInfoList))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::CallChainLog");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isOn);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, chainInfoList);
        return h_;
    }

    public CallChainLog clone()
    {
        CallChainLog c = null;
        try
        {
            c = (CallChainLog)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeBool(this.isOn);
        ChainInfoListHelper.write(ostr, this.chainInfoList);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.isOn = istr.readBool();
        this.chainInfoList = ChainInfoListHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CallChainLog v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CallChainLog ice_read(com.zeroc.Ice.InputStream istr)
    {
        CallChainLog v = new CallChainLog();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CallChainLog> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CallChainLog v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CallChainLog> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CallChainLog.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CallChainLog _nullMarshalValue = new CallChainLog();

    public static final long serialVersionUID = 1416270795L;
}
