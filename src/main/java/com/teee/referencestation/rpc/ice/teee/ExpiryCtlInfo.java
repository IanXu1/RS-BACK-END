// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCBasic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class ExpiryCtlInfo implements Cloneable,
                                      java.io.Serializable
{
    public boolean isExpiryCtlOn;

    public boolean getIsExpiryCtlOn()
    {
        return isExpiryCtlOn;
    }

    public void setIsExpiryCtlOn(boolean isExpiryCtlOn)
    {
        this.isExpiryCtlOn = isExpiryCtlOn;
    }

    public boolean isIsExpiryCtlOn()
    {
        return isExpiryCtlOn;
    }

    public long expiryCtlStartTimeStamp;

    public long getExpiryCtlStartTimeStamp()
    {
        return expiryCtlStartTimeStamp;
    }

    public void setExpiryCtlStartTimeStamp(long expiryCtlStartTimeStamp)
    {
        this.expiryCtlStartTimeStamp = expiryCtlStartTimeStamp;
    }

    public long expiryCtlEndTimeStamp;

    public long getExpiryCtlEndTimeStamp()
    {
        return expiryCtlEndTimeStamp;
    }

    public void setExpiryCtlEndTimeStamp(long expiryCtlEndTimeStamp)
    {
        this.expiryCtlEndTimeStamp = expiryCtlEndTimeStamp;
    }

    public ExpiryCtlInfo()
    {
        this.isExpiryCtlOn = false;
        this.expiryCtlStartTimeStamp = 0L;
        this.expiryCtlEndTimeStamp = 0L;
    }

    public ExpiryCtlInfo(boolean isExpiryCtlOn, long expiryCtlStartTimeStamp, long expiryCtlEndTimeStamp)
    {
        this.isExpiryCtlOn = isExpiryCtlOn;
        this.expiryCtlStartTimeStamp = expiryCtlStartTimeStamp;
        this.expiryCtlEndTimeStamp = expiryCtlEndTimeStamp;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ExpiryCtlInfo r = null;
        if(rhs instanceof ExpiryCtlInfo)
        {
            r = (ExpiryCtlInfo)rhs;
        }

        if(r != null)
        {
            if(this.isExpiryCtlOn != r.isExpiryCtlOn)
            {
                return false;
            }
            if(this.expiryCtlStartTimeStamp != r.expiryCtlStartTimeStamp)
            {
                return false;
            }
            if(this.expiryCtlEndTimeStamp != r.expiryCtlEndTimeStamp)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::ExpiryCtlInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isExpiryCtlOn);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, expiryCtlStartTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, expiryCtlEndTimeStamp);
        return h_;
    }

    public ExpiryCtlInfo clone()
    {
        ExpiryCtlInfo c = null;
        try
        {
            c = (ExpiryCtlInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeBool(this.isExpiryCtlOn);
        ostr.writeLong(this.expiryCtlStartTimeStamp);
        ostr.writeLong(this.expiryCtlEndTimeStamp);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.isExpiryCtlOn = istr.readBool();
        this.expiryCtlStartTimeStamp = istr.readLong();
        this.expiryCtlEndTimeStamp = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ExpiryCtlInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public ExpiryCtlInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        ExpiryCtlInfo v = new ExpiryCtlInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ExpiryCtlInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ExpiryCtlInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(17);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<ExpiryCtlInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(ExpiryCtlInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final ExpiryCtlInfo _nullMarshalValue = new ExpiryCtlInfo();

    public static final long serialVersionUID = 219996999L;
}
