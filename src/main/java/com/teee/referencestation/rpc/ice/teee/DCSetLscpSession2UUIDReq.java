// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCExtd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCSetLscpSession2UUIDReq implements Cloneable,
                                                 java.io.Serializable
{
    public String sessionid;

    public String getSessionid()
    {
        return sessionid;
    }

    public void setSessionid(String sessionid)
    {
        this.sessionid = sessionid;
    }

    public long uuid;

    public long getUuid()
    {
        return uuid;
    }

    public void setUuid(long uuid)
    {
        this.uuid = uuid;
    }

    public long maxLifeTimeMs;

    public long getMaxLifeTimeMs()
    {
        return maxLifeTimeMs;
    }

    public void setMaxLifeTimeMs(long maxLifeTimeMs)
    {
        this.maxLifeTimeMs = maxLifeTimeMs;
    }

    public DCSetLscpSession2UUIDReq()
    {
        this.sessionid = "";
        this.uuid = 0L;
        this.maxLifeTimeMs = 0L;
    }

    public DCSetLscpSession2UUIDReq(String sessionid, long uuid, long maxLifeTimeMs)
    {
        this.sessionid = sessionid;
        this.uuid = uuid;
        this.maxLifeTimeMs = maxLifeTimeMs;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCSetLscpSession2UUIDReq r = null;
        if(rhs instanceof DCSetLscpSession2UUIDReq)
        {
            r = (DCSetLscpSession2UUIDReq)rhs;
        }

        if(r != null)
        {
            if(this.sessionid != r.sessionid)
            {
                if(this.sessionid == null || r.sessionid == null || !this.sessionid.equals(r.sessionid))
                {
                    return false;
                }
            }
            if(this.uuid != r.uuid)
            {
                return false;
            }
            if(this.maxLifeTimeMs != r.maxLifeTimeMs)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCSetLscpSession2UUIDReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, sessionid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, uuid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, maxLifeTimeMs);
        return h_;
    }

    public DCSetLscpSession2UUIDReq clone()
    {
        DCSetLscpSession2UUIDReq c = null;
        try
        {
            c = (DCSetLscpSession2UUIDReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.sessionid);
        ostr.writeLong(this.uuid);
        ostr.writeLong(this.maxLifeTimeMs);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.sessionid = istr.readString();
        this.uuid = istr.readLong();
        this.maxLifeTimeMs = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCSetLscpSession2UUIDReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCSetLscpSession2UUIDReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCSetLscpSession2UUIDReq v = new DCSetLscpSession2UUIDReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCSetLscpSession2UUIDReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCSetLscpSession2UUIDReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DCSetLscpSession2UUIDReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DCSetLscpSession2UUIDReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCSetLscpSession2UUIDReq _nullMarshalValue = new DCSetLscpSession2UUIDReq();

    public static final long serialVersionUID = -1292308812L;
}
