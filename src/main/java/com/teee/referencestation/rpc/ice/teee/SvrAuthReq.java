// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEENtripProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class SvrAuthReq implements Cloneable,
                                   java.io.Serializable
{
    public String user;

    public String getUser()
    {
        return user;
    }

    public void setUser(String user)
    {
        this.user = user;
    }

    public String pwd;

    public String getPwd()
    {
        return pwd;
    }

    public void setPwd(String pwd)
    {
        this.pwd = pwd;
    }

    public SvrAuthReq()
    {
        this.user = "";
        this.pwd = "";
    }

    public SvrAuthReq(String user, String pwd)
    {
        this.user = user;
        this.pwd = pwd;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SvrAuthReq r = null;
        if(rhs instanceof SvrAuthReq)
        {
            r = (SvrAuthReq)rhs;
        }

        if(r != null)
        {
            if(this.user != r.user)
            {
                if(this.user == null || r.user == null || !this.user.equals(r.user))
                {
                    return false;
                }
            }
            if(this.pwd != r.pwd)
            {
                if(this.pwd == null || r.pwd == null || !this.pwd.equals(r.pwd))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::SvrAuthReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, user);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pwd);
        return h_;
    }

    public SvrAuthReq clone()
    {
        SvrAuthReq c = null;
        try
        {
            c = (SvrAuthReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.user);
        ostr.writeString(this.pwd);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.user = istr.readString();
        this.pwd = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, SvrAuthReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public SvrAuthReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        SvrAuthReq v = new SvrAuthReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<SvrAuthReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, SvrAuthReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<SvrAuthReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(SvrAuthReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final SvrAuthReq _nullMarshalValue = new SvrAuthReq();

    public static final long serialVersionUID = -1846745903L;
}
