// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEERSDCAPIServant.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public interface TEEERSDCAPIServant extends com.zeroc.Ice.Object
{
    public static class SetCacheResult
    {
        public SetCacheResult()
        {
        }

        public SetCacheResult(int returnValue, SetCacheResp resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public SetCacheResp resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SetCacheResp.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = SetCacheResp.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    public static class GetCacheResult
    {
        public GetCacheResult()
        {
        }

        public GetCacheResult(int returnValue, GetCacheResp resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public GetCacheResp resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            GetCacheResp.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = GetCacheResp.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    public static class DeleteCacheResult
    {
        public DeleteCacheResult()
        {
        }

        public DeleteCacheResult(int returnValue, DeleteCacheResp resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public DeleteCacheResp resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DeleteCacheResp.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = DeleteCacheResp.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    public static class DCCreateResult
    {
        public DCCreateResult()
        {
        }

        public DCCreateResult(int returnValue, DCCreateResp resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public DCCreateResp resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DCCreateResp.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = DCCreateResp.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    public static class DCDeleteResult
    {
        public DCDeleteResult()
        {
        }

        public DCDeleteResult(int returnValue, DCDeleteResp resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public DCDeleteResp resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DCDeleteResp.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = DCDeleteResp.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    public static class DCUpdateResult
    {
        public DCUpdateResult()
        {
        }

        public DCUpdateResult(int returnValue, DCUpdateResp resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public DCUpdateResp resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DCUpdateResp.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = DCUpdateResp.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    public static class DCGetResult
    {
        public DCGetResult()
        {
        }

        public DCGetResult(int returnValue, DCGetResp resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public DCGetResp resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DCGetResp.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = DCGetResp.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    public static class DCPagedQueryResult
    {
        public DCPagedQueryResult()
        {
        }

        public DCPagedQueryResult(int returnValue, DCPagedQueryResp resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public DCPagedQueryResp resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DCPagedQueryResp.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = DCPagedQueryResp.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    public static class HandlerDCExtdPackResult
    {
        public HandlerDCExtdPackResult()
        {
        }

        public HandlerDCExtdPackResult(int returnValue, DCExtdPack resp)
        {
            this.returnValue = returnValue;
            this.resp = resp;
        }

        public int returnValue;
        public DCExtdPack resp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DCExtdPack.ice_write(ostr, this.resp);
            ostr.writeInt(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.resp = DCExtdPack.ice_read(istr);
            returnValue = istr.readInt();
        }
    }

    java.util.concurrent.CompletionStage<SetCacheResult> SetCacheAsync(SetCacheReq req, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<GetCacheResult> GetCacheAsync(GetCacheReq req, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<DeleteCacheResult> DeleteCacheAsync(DeleteCacheReq req, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<DCCreateResult> DCCreateAsync(DCCreateReq req, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<DCDeleteResult> DCDeleteAsync(DCDeleteReq req, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<DCUpdateResult> DCUpdateAsync(DCUpdateReq req, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<DCGetResult> DCGetAsync(DCGetReq req, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<DCPagedQueryResult> DCPagedQueryAsync(DCPagedQueryReq req, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<HandlerDCExtdPackResult> HandlerDCExtdPackAsync(DCExtdPack req, com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::teee::TEEERSDCAPIServant"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::teee::TEEERSDCAPIServant";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SetCache(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SetCacheReq iceP_req;
        iceP_req = SetCacheReq.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.SetCacheAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_GetCache(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        GetCacheReq iceP_req;
        iceP_req = GetCacheReq.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.GetCacheAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_DeleteCache(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DeleteCacheReq iceP_req;
        iceP_req = DeleteCacheReq.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.DeleteCacheAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_DCCreate(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DCCreateReq iceP_req;
        iceP_req = DCCreateReq.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.DCCreateAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_DCDelete(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DCDeleteReq iceP_req;
        iceP_req = DCDeleteReq.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.DCDeleteAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_DCUpdate(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DCUpdateReq iceP_req;
        iceP_req = DCUpdateReq.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.DCUpdateAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_DCGet(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DCGetReq iceP_req;
        iceP_req = DCGetReq.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.DCGetAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_DCPagedQuery(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DCPagedQueryReq iceP_req;
        iceP_req = DCPagedQueryReq.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.DCPagedQueryAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_HandlerDCExtdPack(TEEERSDCAPIServant obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DCExtdPack iceP_req;
        iceP_req = DCExtdPack.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.HandlerDCExtdPackAsync(iceP_req, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    final static String[] _iceOps =
    {
        "DCCreate",
        "DCDelete",
        "DCGet",
        "DCPagedQuery",
        "DCUpdate",
        "DeleteCache",
        "GetCache",
        "HandlerDCExtdPack",
        "SetCache",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_DCCreate(this, in, current);
            }
            case 1:
            {
                return _iceD_DCDelete(this, in, current);
            }
            case 2:
            {
                return _iceD_DCGet(this, in, current);
            }
            case 3:
            {
                return _iceD_DCPagedQuery(this, in, current);
            }
            case 4:
            {
                return _iceD_DCUpdate(this, in, current);
            }
            case 5:
            {
                return _iceD_DeleteCache(this, in, current);
            }
            case 6:
            {
                return _iceD_GetCache(this, in, current);
            }
            case 7:
            {
                return _iceD_HandlerDCExtdPack(this, in, current);
            }
            case 8:
            {
                return _iceD_SetCache(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 11:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 12:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
