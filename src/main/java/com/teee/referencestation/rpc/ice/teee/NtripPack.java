// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEENtripProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class NtripPack implements Cloneable,
                                  java.io.Serializable
{
    public RPCHeader rpcHeader;

    public RPCHeader getRpcHeader()
    {
        return rpcHeader;
    }

    public void setRpcHeader(RPCHeader rpcHeader)
    {
        this.rpcHeader = rpcHeader;
    }

    public NtripVer nTripVer;

    public NtripVer getNTripVer()
    {
        return nTripVer;
    }

    public void setNTripVer(NtripVer nTripVer)
    {
        this.nTripVer = nTripVer;
    }

    public NtripCmdType nTripCmdType;

    public NtripCmdType getNTripCmdType()
    {
        return nTripCmdType;
    }

    public void setNTripCmdType(NtripCmdType nTripCmdType)
    {
        this.nTripCmdType = nTripCmdType;
    }

    public NtripTType ntripTType;

    public NtripTType getNtripTType()
    {
        return ntripTType;
    }

    public void setNtripTType(NtripTType ntripTType)
    {
        this.ntripTType = ntripTType;
    }

    public byte[] ntripContext;

    public byte[] getNtripContext()
    {
        return ntripContext;
    }

    public void setNtripContext(byte[] ntripContext)
    {
        this.ntripContext = ntripContext;
    }

    public byte getNtripContext(int index)
    {
        return this.ntripContext[index];
    }

    public void setNtripContext(int index, byte val)
    {
        this.ntripContext[index] = val;
    }

    public byte[] ntripBody;

    public byte[] getNtripBody()
    {
        return ntripBody;
    }

    public void setNtripBody(byte[] ntripBody)
    {
        this.ntripBody = ntripBody;
    }

    public byte getNtripBody(int index)
    {
        return this.ntripBody[index];
    }

    public void setNtripBody(int index, byte val)
    {
        this.ntripBody[index] = val;
    }

    public NtripPack()
    {
        this.rpcHeader = new RPCHeader();
        this.nTripVer = NtripVer.E_NTRIPVER_ERROR;
        this.nTripCmdType = NtripCmdType.E_NTRIPCMDTYPE_ERROR;
        this.ntripTType = NtripTType.E_NTRIPTTYPE_TCP_FMT_HTTP;
    }

    public NtripPack(RPCHeader rpcHeader, NtripVer nTripVer, NtripCmdType nTripCmdType, NtripTType ntripTType, byte[] ntripContext, byte[] ntripBody)
    {
        this.rpcHeader = rpcHeader;
        this.nTripVer = nTripVer;
        this.nTripCmdType = nTripCmdType;
        this.ntripTType = ntripTType;
        this.ntripContext = ntripContext;
        this.ntripBody = ntripBody;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        NtripPack r = null;
        if(rhs instanceof NtripPack)
        {
            r = (NtripPack)rhs;
        }

        if(r != null)
        {
            if(this.rpcHeader != r.rpcHeader)
            {
                if(this.rpcHeader == null || r.rpcHeader == null || !this.rpcHeader.equals(r.rpcHeader))
                {
                    return false;
                }
            }
            if(this.nTripVer != r.nTripVer)
            {
                if(this.nTripVer == null || r.nTripVer == null || !this.nTripVer.equals(r.nTripVer))
                {
                    return false;
                }
            }
            if(this.nTripCmdType != r.nTripCmdType)
            {
                if(this.nTripCmdType == null || r.nTripCmdType == null || !this.nTripCmdType.equals(r.nTripCmdType))
                {
                    return false;
                }
            }
            if(this.ntripTType != r.ntripTType)
            {
                if(this.ntripTType == null || r.ntripTType == null || !this.ntripTType.equals(r.ntripTType))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.ntripContext, r.ntripContext))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.ntripBody, r.ntripBody))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::NtripPack");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, rpcHeader);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nTripVer);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nTripCmdType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ntripTType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ntripContext);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ntripBody);
        return h_;
    }

    public NtripPack clone()
    {
        NtripPack c = null;
        try
        {
            c = (NtripPack)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        RPCHeader.ice_write(ostr, this.rpcHeader);
        NtripVer.ice_write(ostr, this.nTripVer);
        NtripCmdType.ice_write(ostr, this.nTripCmdType);
        NtripTType.ice_write(ostr, this.ntripTType);
        ostr.writeByteSeq(this.ntripContext);
        ostr.writeByteSeq(this.ntripBody);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.rpcHeader = RPCHeader.ice_read(istr);
        this.nTripVer = NtripVer.ice_read(istr);
        this.nTripCmdType = NtripCmdType.ice_read(istr);
        this.ntripTType = NtripTType.ice_read(istr);
        this.ntripContext = istr.readByteSeq();
        this.ntripBody = istr.readByteSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, NtripPack v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public NtripPack ice_read(com.zeroc.Ice.InputStream istr)
    {
        NtripPack v = new NtripPack();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<NtripPack> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, NtripPack v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<NtripPack> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(NtripPack.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final NtripPack _nullMarshalValue = new NtripPack();

    public static final long serialVersionUID = -967071283L;
}
