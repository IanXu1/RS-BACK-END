// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEERSDCAPIServant.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public interface TEEERSDCAPIServantPrx extends com.zeroc.Ice.ObjectPrx
{
    default TEEERSDCAPIServant.SetCacheResult SetCache(SetCacheReq req)
    {
        return SetCache(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.SetCacheResult SetCache(SetCacheReq req, java.util.Map<String, String> context)
    {
        return _iceI_SetCacheAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.SetCacheResult> SetCacheAsync(SetCacheReq req)
    {
        return _iceI_SetCacheAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.SetCacheResult> SetCacheAsync(SetCacheReq req, java.util.Map<String, String> context)
    {
        return _iceI_SetCacheAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.SetCacheResult> _iceI_SetCacheAsync(SetCacheReq iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.SetCacheResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "SetCache", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SetCacheReq.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.SetCacheResult ret = new TEEERSDCAPIServant.SetCacheResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TEEERSDCAPIServant.GetCacheResult GetCache(GetCacheReq req)
    {
        return GetCache(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.GetCacheResult GetCache(GetCacheReq req, java.util.Map<String, String> context)
    {
        return _iceI_GetCacheAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.GetCacheResult> GetCacheAsync(GetCacheReq req)
    {
        return _iceI_GetCacheAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.GetCacheResult> GetCacheAsync(GetCacheReq req, java.util.Map<String, String> context)
    {
        return _iceI_GetCacheAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.GetCacheResult> _iceI_GetCacheAsync(GetCacheReq iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.GetCacheResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "GetCache", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     GetCacheReq.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.GetCacheResult ret = new TEEERSDCAPIServant.GetCacheResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TEEERSDCAPIServant.DeleteCacheResult DeleteCache(DeleteCacheReq req)
    {
        return DeleteCache(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.DeleteCacheResult DeleteCache(DeleteCacheReq req, java.util.Map<String, String> context)
    {
        return _iceI_DeleteCacheAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DeleteCacheResult> DeleteCacheAsync(DeleteCacheReq req)
    {
        return _iceI_DeleteCacheAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DeleteCacheResult> DeleteCacheAsync(DeleteCacheReq req, java.util.Map<String, String> context)
    {
        return _iceI_DeleteCacheAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DeleteCacheResult> _iceI_DeleteCacheAsync(DeleteCacheReq iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DeleteCacheResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "DeleteCache", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DeleteCacheReq.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.DeleteCacheResult ret = new TEEERSDCAPIServant.DeleteCacheResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TEEERSDCAPIServant.DCCreateResult DCCreate(DCCreateReq req)
    {
        return DCCreate(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.DCCreateResult DCCreate(DCCreateReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCCreateAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCCreateResult> DCCreateAsync(DCCreateReq req)
    {
        return _iceI_DCCreateAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCCreateResult> DCCreateAsync(DCCreateReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCCreateAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCCreateResult> _iceI_DCCreateAsync(DCCreateReq iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCCreateResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "DCCreate", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DCCreateReq.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.DCCreateResult ret = new TEEERSDCAPIServant.DCCreateResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TEEERSDCAPIServant.DCDeleteResult DCDelete(DCDeleteReq req)
    {
        return DCDelete(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.DCDeleteResult DCDelete(DCDeleteReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCDeleteAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCDeleteResult> DCDeleteAsync(DCDeleteReq req)
    {
        return _iceI_DCDeleteAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCDeleteResult> DCDeleteAsync(DCDeleteReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCDeleteAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCDeleteResult> _iceI_DCDeleteAsync(DCDeleteReq iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCDeleteResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "DCDelete", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DCDeleteReq.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.DCDeleteResult ret = new TEEERSDCAPIServant.DCDeleteResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TEEERSDCAPIServant.DCUpdateResult DCUpdate(DCUpdateReq req)
    {
        return DCUpdate(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.DCUpdateResult DCUpdate(DCUpdateReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCUpdateAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCUpdateResult> DCUpdateAsync(DCUpdateReq req)
    {
        return _iceI_DCUpdateAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCUpdateResult> DCUpdateAsync(DCUpdateReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCUpdateAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCUpdateResult> _iceI_DCUpdateAsync(DCUpdateReq iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCUpdateResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "DCUpdate", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DCUpdateReq.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.DCUpdateResult ret = new TEEERSDCAPIServant.DCUpdateResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TEEERSDCAPIServant.DCGetResult DCGet(DCGetReq req)
    {
        return DCGet(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.DCGetResult DCGet(DCGetReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCGetAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCGetResult> DCGetAsync(DCGetReq req)
    {
        return _iceI_DCGetAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCGetResult> DCGetAsync(DCGetReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCGetAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCGetResult> _iceI_DCGetAsync(DCGetReq iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCGetResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "DCGet", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DCGetReq.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.DCGetResult ret = new TEEERSDCAPIServant.DCGetResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TEEERSDCAPIServant.DCPagedQueryResult DCPagedQuery(DCPagedQueryReq req)
    {
        return DCPagedQuery(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.DCPagedQueryResult DCPagedQuery(DCPagedQueryReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCPagedQueryAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCPagedQueryResult> DCPagedQueryAsync(DCPagedQueryReq req)
    {
        return _iceI_DCPagedQueryAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.DCPagedQueryResult> DCPagedQueryAsync(DCPagedQueryReq req, java.util.Map<String, String> context)
    {
        return _iceI_DCPagedQueryAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCPagedQueryResult> _iceI_DCPagedQueryAsync(DCPagedQueryReq iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.DCPagedQueryResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "DCPagedQuery", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DCPagedQueryReq.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.DCPagedQueryResult ret = new TEEERSDCAPIServant.DCPagedQueryResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TEEERSDCAPIServant.HandlerDCExtdPackResult HandlerDCExtdPack(DCExtdPack req)
    {
        return HandlerDCExtdPack(req, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TEEERSDCAPIServant.HandlerDCExtdPackResult HandlerDCExtdPack(DCExtdPack req, java.util.Map<String, String> context)
    {
        return _iceI_HandlerDCExtdPackAsync(req, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.HandlerDCExtdPackResult> HandlerDCExtdPackAsync(DCExtdPack req)
    {
        return _iceI_HandlerDCExtdPackAsync(req, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TEEERSDCAPIServant.HandlerDCExtdPackResult> HandlerDCExtdPackAsync(DCExtdPack req, java.util.Map<String, String> context)
    {
        return _iceI_HandlerDCExtdPackAsync(req, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.HandlerDCExtdPackResult> _iceI_HandlerDCExtdPackAsync(DCExtdPack iceP_req, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TEEERSDCAPIServant.HandlerDCExtdPackResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "HandlerDCExtdPack", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DCExtdPack.ice_write(ostr, iceP_req);
                 }, istr -> {
                     TEEERSDCAPIServant.HandlerDCExtdPackResult ret = new TEEERSDCAPIServant.HandlerDCExtdPackResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TEEERSDCAPIServantPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), TEEERSDCAPIServantPrx.class, _TEEERSDCAPIServantPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TEEERSDCAPIServantPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), TEEERSDCAPIServantPrx.class, _TEEERSDCAPIServantPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TEEERSDCAPIServantPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), TEEERSDCAPIServantPrx.class, _TEEERSDCAPIServantPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TEEERSDCAPIServantPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), TEEERSDCAPIServantPrx.class, _TEEERSDCAPIServantPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TEEERSDCAPIServantPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, TEEERSDCAPIServantPrx.class, _TEEERSDCAPIServantPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TEEERSDCAPIServantPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, TEEERSDCAPIServantPrx.class, _TEEERSDCAPIServantPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (TEEERSDCAPIServantPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_adapterId(String newAdapterId)
    {
        return (TEEERSDCAPIServantPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (TEEERSDCAPIServantPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (TEEERSDCAPIServantPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_invocationTimeout(int newTimeout)
    {
        return (TEEERSDCAPIServantPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_connectionCached(boolean newCache)
    {
        return (TEEERSDCAPIServantPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (TEEERSDCAPIServantPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_secure(boolean b)
    {
        return (TEEERSDCAPIServantPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (TEEERSDCAPIServantPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_preferSecure(boolean b)
    {
        return (TEEERSDCAPIServantPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (TEEERSDCAPIServantPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (TEEERSDCAPIServantPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_collocationOptimized(boolean b)
    {
        return (TEEERSDCAPIServantPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_twoway()
    {
        return (TEEERSDCAPIServantPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_oneway()
    {
        return (TEEERSDCAPIServantPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_batchOneway()
    {
        return (TEEERSDCAPIServantPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_datagram()
    {
        return (TEEERSDCAPIServantPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_batchDatagram()
    {
        return (TEEERSDCAPIServantPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_compress(boolean co)
    {
        return (TEEERSDCAPIServantPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_timeout(int t)
    {
        return (TEEERSDCAPIServantPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_connectionId(String connectionId)
    {
        return (TEEERSDCAPIServantPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default TEEERSDCAPIServantPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (TEEERSDCAPIServantPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::teee::TEEERSDCAPIServant";
    }
}
