// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEENtripProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class CliPushGGAReq implements Cloneable,
                                      java.io.Serializable
{
    public String sGGA;

    public String getSGGA()
    {
        return sGGA;
    }

    public void setSGGA(String sGGA)
    {
        this.sGGA = sGGA;
    }

    public CliPushGGAReq()
    {
        this.sGGA = "";
    }

    public CliPushGGAReq(String sGGA)
    {
        this.sGGA = sGGA;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CliPushGGAReq r = null;
        if(rhs instanceof CliPushGGAReq)
        {
            r = (CliPushGGAReq)rhs;
        }

        if(r != null)
        {
            if(this.sGGA != r.sGGA)
            {
                if(this.sGGA == null || r.sGGA == null || !this.sGGA.equals(r.sGGA))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::CliPushGGAReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, sGGA);
        return h_;
    }

    public CliPushGGAReq clone()
    {
        CliPushGGAReq c = null;
        try
        {
            c = (CliPushGGAReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.sGGA);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.sGGA = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CliPushGGAReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CliPushGGAReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        CliPushGGAReq v = new CliPushGGAReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CliPushGGAReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CliPushGGAReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CliPushGGAReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CliPushGGAReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CliPushGGAReq _nullMarshalValue = new CliPushGGAReq();

    public static final long serialVersionUID = -1881411632L;
}
