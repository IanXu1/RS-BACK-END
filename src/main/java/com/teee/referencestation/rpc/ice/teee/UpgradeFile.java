// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEUpgradeFile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class UpgradeFile implements Cloneable,
                                    java.io.Serializable
{
    public long upgradeFileId;

    public long getUpgradeFileId()
    {
        return upgradeFileId;
    }

    public void setUpgradeFileId(long upgradeFileId)
    {
        this.upgradeFileId = upgradeFileId;
    }

    public String fileName;

    public String getFileName()
    {
        return fileName;
    }

    public void setFileName(String fileName)
    {
        this.fileName = fileName;
    }

    public String fileContent;

    public String getFileContent()
    {
        return fileContent;
    }

    public void setFileContent(String fileContent)
    {
        this.fileContent = fileContent;
    }

    public int state;

    public int getState()
    {
        return state;
    }

    public void setState(int state)
    {
        this.state = state;
    }

    public int type;

    public int getType()
    {
        return type;
    }

    public void setType(int type)
    {
        this.type = type;
    }

    public AuditingInfo auditingInfo;

    public AuditingInfo getAuditingInfo()
    {
        return auditingInfo;
    }

    public void setAuditingInfo(AuditingInfo auditingInfo)
    {
        this.auditingInfo = auditingInfo;
    }

    public UpgradeFile()
    {
        this.upgradeFileId = 0L;
        this.fileName = "";
        this.fileContent = "";
        this.state = 0;
        this.type = 0;
        this.auditingInfo = new AuditingInfo();
    }

    public UpgradeFile(long upgradeFileId, String fileName, String fileContent, int state, int type, AuditingInfo auditingInfo)
    {
        this.upgradeFileId = upgradeFileId;
        this.fileName = fileName;
        this.fileContent = fileContent;
        this.state = state;
        this.type = type;
        this.auditingInfo = auditingInfo;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UpgradeFile r = null;
        if(rhs instanceof UpgradeFile)
        {
            r = (UpgradeFile)rhs;
        }

        if(r != null)
        {
            if(this.upgradeFileId != r.upgradeFileId)
            {
                return false;
            }
            if(this.fileName != r.fileName)
            {
                if(this.fileName == null || r.fileName == null || !this.fileName.equals(r.fileName))
                {
                    return false;
                }
            }
            if(this.fileContent != r.fileContent)
            {
                if(this.fileContent == null || r.fileContent == null || !this.fileContent.equals(r.fileContent))
                {
                    return false;
                }
            }
            if(this.state != r.state)
            {
                return false;
            }
            if(this.type != r.type)
            {
                return false;
            }
            if(this.auditingInfo != r.auditingInfo)
            {
                if(this.auditingInfo == null || r.auditingInfo == null || !this.auditingInfo.equals(r.auditingInfo))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::UpgradeFile");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, upgradeFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileContent);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, state);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, type);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, auditingInfo);
        return h_;
    }

    public UpgradeFile clone()
    {
        UpgradeFile c = null;
        try
        {
            c = (UpgradeFile)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.upgradeFileId);
        ostr.writeString(this.fileName);
        ostr.writeString(this.fileContent);
        ostr.writeInt(this.state);
        ostr.writeInt(this.type);
        AuditingInfo.ice_write(ostr, this.auditingInfo);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.upgradeFileId = istr.readLong();
        this.fileName = istr.readString();
        this.fileContent = istr.readString();
        this.state = istr.readInt();
        this.type = istr.readInt();
        this.auditingInfo = AuditingInfo.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, UpgradeFile v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public UpgradeFile ice_read(com.zeroc.Ice.InputStream istr)
    {
        UpgradeFile v = new UpgradeFile();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UpgradeFile> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, UpgradeFile v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<UpgradeFile> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(UpgradeFile.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final UpgradeFile _nullMarshalValue = new UpgradeFile();

    public static final long serialVersionUID = 818700341L;
}
