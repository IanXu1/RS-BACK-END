// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEELscpProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class LscpHeader implements Cloneable,
                                   java.io.Serializable
{
    public long sessionid;

    public long getSessionid()
    {
        return sessionid;
    }

    public void setSessionid(long sessionid)
    {
        this.sessionid = sessionid;
    }

    public byte ver;

    public byte getVer()
    {
        return ver;
    }

    public void setVer(byte ver)
    {
        this.ver = ver;
    }

    public byte resvX;

    public byte getResvX()
    {
        return resvX;
    }

    public void setResvX(byte resvX)
    {
        this.resvX = resvX;
    }

    public boolean isNeedAck;

    public boolean getIsNeedAck()
    {
        return isNeedAck;
    }

    public void setIsNeedAck(boolean isNeedAck)
    {
        this.isNeedAck = isNeedAck;
    }

    public boolean isIsNeedAck()
    {
        return isNeedAck;
    }

    public boolean isAck;

    public boolean getIsAck()
    {
        return isAck;
    }

    public void setIsAck(boolean isAck)
    {
        this.isAck = isAck;
    }

    public boolean isIsAck()
    {
        return isAck;
    }

    public boolean isBroadCast;

    public boolean getIsBroadCast()
    {
        return isBroadCast;
    }

    public void setIsBroadCast(boolean isBroadCast)
    {
        this.isBroadCast = isBroadCast;
    }

    public boolean isIsBroadCast()
    {
        return isBroadCast;
    }

    public LscpCrcType lscpCrcType;

    public LscpCrcType getLscpCrcType()
    {
        return lscpCrcType;
    }

    public void setLscpCrcType(LscpCrcType lscpCrcType)
    {
        this.lscpCrcType = lscpCrcType;
    }

    public byte resvY;

    public byte getResvY()
    {
        return resvY;
    }

    public void setResvY(byte resvY)
    {
        this.resvY = resvY;
    }

    public int crcValue;

    public int getCrcValue()
    {
        return crcValue;
    }

    public void setCrcValue(int crcValue)
    {
        this.crcValue = crcValue;
    }

    public long seqNo;

    public long getSeqNo()
    {
        return seqNo;
    }

    public void setSeqNo(long seqNo)
    {
        this.seqNo = seqNo;
    }

    public LscpCmd lscpCmd;

    public LscpCmd getLscpCmd()
    {
        return lscpCmd;
    }

    public void setLscpCmd(LscpCmd lscpCmd)
    {
        this.lscpCmd = lscpCmd;
    }

    public short srcAddr;

    public short getSrcAddr()
    {
        return srcAddr;
    }

    public void setSrcAddr(short srcAddr)
    {
        this.srcAddr = srcAddr;
    }

    public short dstAddr;

    public short getDstAddr()
    {
        return dstAddr;
    }

    public void setDstAddr(short dstAddr)
    {
        this.dstAddr = dstAddr;
    }

    public int pkgTotalNum;

    public int getPkgTotalNum()
    {
        return pkgTotalNum;
    }

    public void setPkgTotalNum(int pkgTotalNum)
    {
        this.pkgTotalNum = pkgTotalNum;
    }

    public int pkgIdx;

    public int getPkgIdx()
    {
        return pkgIdx;
    }

    public void setPkgIdx(int pkgIdx)
    {
        this.pkgIdx = pkgIdx;
    }

    public int pkgLen;

    public int getPkgLen()
    {
        return pkgLen;
    }

    public void setPkgLen(int pkgLen)
    {
        this.pkgLen = pkgLen;
    }

    public byte[] resvZ;

    public byte[] getResvZ()
    {
        return resvZ;
    }

    public void setResvZ(byte[] resvZ)
    {
        this.resvZ = resvZ;
    }

    public byte getResvZ(int index)
    {
        return this.resvZ[index];
    }

    public void setResvZ(int index, byte val)
    {
        this.resvZ[index] = val;
    }

    public LscpHeader()
    {
        this.sessionid = 0L;
        this.isNeedAck = false;
        this.isAck = false;
        this.isBroadCast = false;
        this.lscpCrcType = LscpCrcType.CRC_16;
        this.crcValue = 0;
        this.seqNo = 0L;
        this.lscpCmd = LscpCmd.FRMTYPE_REG_NO_AUTH;
        this.srcAddr = 0;
        this.dstAddr = 0;
        this.pkgTotalNum = 1;
        this.pkgIdx = 1;
        this.pkgLen = 0;
    }

    public LscpHeader(long sessionid, byte ver, byte resvX, boolean isNeedAck, boolean isAck, boolean isBroadCast, LscpCrcType lscpCrcType, byte resvY, int crcValue, long seqNo, LscpCmd lscpCmd, short srcAddr, short dstAddr, int pkgTotalNum, int pkgIdx, int pkgLen, byte[] resvZ)
    {
        this.sessionid = sessionid;
        this.ver = ver;
        this.resvX = resvX;
        this.isNeedAck = isNeedAck;
        this.isAck = isAck;
        this.isBroadCast = isBroadCast;
        this.lscpCrcType = lscpCrcType;
        this.resvY = resvY;
        this.crcValue = crcValue;
        this.seqNo = seqNo;
        this.lscpCmd = lscpCmd;
        this.srcAddr = srcAddr;
        this.dstAddr = dstAddr;
        this.pkgTotalNum = pkgTotalNum;
        this.pkgIdx = pkgIdx;
        this.pkgLen = pkgLen;
        this.resvZ = resvZ;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LscpHeader r = null;
        if(rhs instanceof LscpHeader)
        {
            r = (LscpHeader)rhs;
        }

        if(r != null)
        {
            if(this.sessionid != r.sessionid)
            {
                return false;
            }
            if(this.ver != r.ver)
            {
                return false;
            }
            if(this.resvX != r.resvX)
            {
                return false;
            }
            if(this.isNeedAck != r.isNeedAck)
            {
                return false;
            }
            if(this.isAck != r.isAck)
            {
                return false;
            }
            if(this.isBroadCast != r.isBroadCast)
            {
                return false;
            }
            if(this.lscpCrcType != r.lscpCrcType)
            {
                if(this.lscpCrcType == null || r.lscpCrcType == null || !this.lscpCrcType.equals(r.lscpCrcType))
                {
                    return false;
                }
            }
            if(this.resvY != r.resvY)
            {
                return false;
            }
            if(this.crcValue != r.crcValue)
            {
                return false;
            }
            if(this.seqNo != r.seqNo)
            {
                return false;
            }
            if(this.lscpCmd != r.lscpCmd)
            {
                if(this.lscpCmd == null || r.lscpCmd == null || !this.lscpCmd.equals(r.lscpCmd))
                {
                    return false;
                }
            }
            if(this.srcAddr != r.srcAddr)
            {
                return false;
            }
            if(this.dstAddr != r.dstAddr)
            {
                return false;
            }
            if(this.pkgTotalNum != r.pkgTotalNum)
            {
                return false;
            }
            if(this.pkgIdx != r.pkgIdx)
            {
                return false;
            }
            if(this.pkgLen != r.pkgLen)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.resvZ, r.resvZ))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::LscpHeader");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, sessionid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ver);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, resvX);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isNeedAck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isAck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isBroadCast);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lscpCrcType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, resvY);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, crcValue);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, seqNo);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lscpCmd);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, srcAddr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dstAddr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pkgTotalNum);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pkgIdx);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pkgLen);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, resvZ);
        return h_;
    }

    public LscpHeader clone()
    {
        LscpHeader c = null;
        try
        {
            c = (LscpHeader)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.sessionid);
        ostr.writeByte(this.ver);
        ostr.writeByte(this.resvX);
        ostr.writeBool(this.isNeedAck);
        ostr.writeBool(this.isAck);
        ostr.writeBool(this.isBroadCast);
        LscpCrcType.ice_write(ostr, this.lscpCrcType);
        ostr.writeByte(this.resvY);
        ostr.writeInt(this.crcValue);
        ostr.writeLong(this.seqNo);
        LscpCmd.ice_write(ostr, this.lscpCmd);
        ostr.writeShort(this.srcAddr);
        ostr.writeShort(this.dstAddr);
        ostr.writeInt(this.pkgTotalNum);
        ostr.writeInt(this.pkgIdx);
        ostr.writeInt(this.pkgLen);
        ostr.writeByteSeq(this.resvZ);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.sessionid = istr.readLong();
        this.ver = istr.readByte();
        this.resvX = istr.readByte();
        this.isNeedAck = istr.readBool();
        this.isAck = istr.readBool();
        this.isBroadCast = istr.readBool();
        this.lscpCrcType = LscpCrcType.ice_read(istr);
        this.resvY = istr.readByte();
        this.crcValue = istr.readInt();
        this.seqNo = istr.readLong();
        this.lscpCmd = LscpCmd.ice_read(istr);
        this.srcAddr = istr.readShort();
        this.dstAddr = istr.readShort();
        this.pkgTotalNum = istr.readInt();
        this.pkgIdx = istr.readInt();
        this.pkgLen = istr.readInt();
        this.resvZ = istr.readByteSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LscpHeader v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LscpHeader ice_read(com.zeroc.Ice.InputStream istr)
    {
        LscpHeader v = new LscpHeader();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LscpHeader> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LscpHeader v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LscpHeader> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LscpHeader.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LscpHeader _nullMarshalValue = new LscpHeader();

    public static final long serialVersionUID = 823082142L;
}
