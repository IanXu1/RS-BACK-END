// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCExtd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCIsExistLscpRtSnoResp implements Cloneable,
                                               java.io.Serializable
{
    public boolean isExist;

    public boolean getIsExist()
    {
        return isExist;
    }

    public void setIsExist(boolean isExist)
    {
        this.isExist = isExist;
    }

    public boolean isIsExist()
    {
        return isExist;
    }

    public long dbid;

    public long getDbid()
    {
        return dbid;
    }

    public void setDbid(long dbid)
    {
        this.dbid = dbid;
    }

    public DCIsExistLscpRtSnoResp()
    {
        this.isExist = false;
    }

    public DCIsExistLscpRtSnoResp(boolean isExist, long dbid)
    {
        this.isExist = isExist;
        this.dbid = dbid;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCIsExistLscpRtSnoResp r = null;
        if(rhs instanceof DCIsExistLscpRtSnoResp)
        {
            r = (DCIsExistLscpRtSnoResp)rhs;
        }

        if(r != null)
        {
            if(this.isExist != r.isExist)
            {
                return false;
            }
            if(this.dbid != r.dbid)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCIsExistLscpRtSnoResp");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isExist);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dbid);
        return h_;
    }

    public DCIsExistLscpRtSnoResp clone()
    {
        DCIsExistLscpRtSnoResp c = null;
        try
        {
            c = (DCIsExistLscpRtSnoResp)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeBool(this.isExist);
        ostr.writeLong(this.dbid);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.isExist = istr.readBool();
        this.dbid = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCIsExistLscpRtSnoResp v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCIsExistLscpRtSnoResp ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCIsExistLscpRtSnoResp v = new DCIsExistLscpRtSnoResp();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCIsExistLscpRtSnoResp> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCIsExistLscpRtSnoResp v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(9);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<DCIsExistLscpRtSnoResp> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(DCIsExistLscpRtSnoResp.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCIsExistLscpRtSnoResp _nullMarshalValue = new DCIsExistLscpRtSnoResp();

    public static final long serialVersionUID = -1758120390L;
}
