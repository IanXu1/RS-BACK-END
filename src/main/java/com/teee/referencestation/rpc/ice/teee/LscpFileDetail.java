// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEELscpProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class LscpFileDetail implements Cloneable,
                                       java.io.Serializable
{
    public String fileName;

    public String getFileName()
    {
        return fileName;
    }

    public void setFileName(String fileName)
    {
        this.fileName = fileName;
    }

    public String lscpFileKey;

    public String getLscpFileKey()
    {
        return lscpFileKey;
    }

    public void setLscpFileKey(String lscpFileKey)
    {
        this.lscpFileKey = lscpFileKey;
    }

    public long fileSize;

    public long getFileSize()
    {
        return fileSize;
    }

    public void setFileSize(long fileSize)
    {
        this.fileSize = fileSize;
    }

    public byte[] fileContent;

    public byte[] getFileContent()
    {
        return fileContent;
    }

    public void setFileContent(byte[] fileContent)
    {
        this.fileContent = fileContent;
    }

    public byte getFileContent(int index)
    {
        return this.fileContent[index];
    }

    public void setFileContent(int index, byte val)
    {
        this.fileContent[index] = val;
    }

    public LscpFileDetail()
    {
        this.fileName = "";
        this.lscpFileKey = "";
        this.fileSize = 0L;
    }

    public LscpFileDetail(String fileName, String lscpFileKey, long fileSize, byte[] fileContent)
    {
        this.fileName = fileName;
        this.lscpFileKey = lscpFileKey;
        this.fileSize = fileSize;
        this.fileContent = fileContent;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LscpFileDetail r = null;
        if(rhs instanceof LscpFileDetail)
        {
            r = (LscpFileDetail)rhs;
        }

        if(r != null)
        {
            if(this.fileName != r.fileName)
            {
                if(this.fileName == null || r.fileName == null || !this.fileName.equals(r.fileName))
                {
                    return false;
                }
            }
            if(this.lscpFileKey != r.lscpFileKey)
            {
                if(this.lscpFileKey == null || r.lscpFileKey == null || !this.lscpFileKey.equals(r.lscpFileKey))
                {
                    return false;
                }
            }
            if(this.fileSize != r.fileSize)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.fileContent, r.fileContent))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::LscpFileDetail");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lscpFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileSize);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileContent);
        return h_;
    }

    public LscpFileDetail clone()
    {
        LscpFileDetail c = null;
        try
        {
            c = (LscpFileDetail)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.fileName);
        ostr.writeString(this.lscpFileKey);
        ostr.writeLong(this.fileSize);
        ostr.writeByteSeq(this.fileContent);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.fileName = istr.readString();
        this.lscpFileKey = istr.readString();
        this.fileSize = istr.readLong();
        this.fileContent = istr.readByteSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LscpFileDetail v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LscpFileDetail ice_read(com.zeroc.Ice.InputStream istr)
    {
        LscpFileDetail v = new LscpFileDetail();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LscpFileDetail> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LscpFileDetail v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LscpFileDetail> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LscpFileDetail.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LscpFileDetail _nullMarshalValue = new LscpFileDetail();

    public static final long serialVersionUID = -1454074639L;
}
