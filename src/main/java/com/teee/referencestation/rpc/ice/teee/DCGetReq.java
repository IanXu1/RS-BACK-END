// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCCURD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class DCGetReq implements Cloneable,
                                 java.io.Serializable
{
    public RPCHeader rpcHeader;

    public RPCHeader getRpcHeader()
    {
        return rpcHeader;
    }

    public void setRpcHeader(RPCHeader rpcHeader)
    {
        this.rpcHeader = rpcHeader;
    }

    public DCTableType dcTableType;

    public DCTableType getDcTableType()
    {
        return dcTableType;
    }

    public void setDcTableType(DCTableType dcTableType)
    {
        this.dcTableType = dcTableType;
    }

    public boolean isUseCond;

    public boolean getIsUseCond()
    {
        return isUseCond;
    }

    public void setIsUseCond(boolean isUseCond)
    {
        this.isUseCond = isUseCond;
    }

    public boolean isIsUseCond()
    {
        return isUseCond;
    }

    public long[] ids;

    public long[] getIds()
    {
        return ids;
    }

    public void setIds(long[] ids)
    {
        this.ids = ids;
    }

    public long getIds(int index)
    {
        return this.ids[index];
    }

    public void setIds(int index, long val)
    {
        this.ids[index] = val;
    }

    public WhereCond[] whereCondSeq;

    public WhereCond[] getWhereCondSeq()
    {
        return whereCondSeq;
    }

    public void setWhereCondSeq(WhereCond[] whereCondSeq)
    {
        this.whereCondSeq = whereCondSeq;
    }

    public WhereCond getWhereCondSeq(int index)
    {
        return this.whereCondSeq[index];
    }

    public void setWhereCondSeq(int index, WhereCond val)
    {
        this.whereCondSeq[index] = val;
    }

    public DCGetReq()
    {
        this.rpcHeader = new RPCHeader();
        this.dcTableType = DCTableType.E_TABLE_ERROR;
        this.isUseCond = false;
    }

    public DCGetReq(RPCHeader rpcHeader, DCTableType dcTableType, boolean isUseCond, long[] ids, WhereCond[] whereCondSeq)
    {
        this.rpcHeader = rpcHeader;
        this.dcTableType = dcTableType;
        this.isUseCond = isUseCond;
        this.ids = ids;
        this.whereCondSeq = whereCondSeq;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DCGetReq r = null;
        if(rhs instanceof DCGetReq)
        {
            r = (DCGetReq)rhs;
        }

        if(r != null)
        {
            if(this.rpcHeader != r.rpcHeader)
            {
                if(this.rpcHeader == null || r.rpcHeader == null || !this.rpcHeader.equals(r.rpcHeader))
                {
                    return false;
                }
            }
            if(this.dcTableType != r.dcTableType)
            {
                if(this.dcTableType == null || r.dcTableType == null || !this.dcTableType.equals(r.dcTableType))
                {
                    return false;
                }
            }
            if(this.isUseCond != r.isUseCond)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.ids, r.ids))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.whereCondSeq, r.whereCondSeq))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::DCGetReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, rpcHeader);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dcTableType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isUseCond);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ids);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, whereCondSeq);
        return h_;
    }

    public DCGetReq clone()
    {
        DCGetReq c = null;
        try
        {
            c = (DCGetReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        RPCHeader.ice_write(ostr, this.rpcHeader);
        DCTableType.ice_write(ostr, this.dcTableType);
        ostr.writeBool(this.isUseCond);
        ostr.writeLongSeq(this.ids);
        WhereCondSeqHelper.write(ostr, this.whereCondSeq);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.rpcHeader = RPCHeader.ice_read(istr);
        this.dcTableType = DCTableType.ice_read(istr);
        this.isUseCond = istr.readBool();
        this.ids = istr.readLongSeq();
        this.whereCondSeq = WhereCondSeqHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DCGetReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DCGetReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        DCGetReq v = new DCGetReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DCGetReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DCGetReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DCGetReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DCGetReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DCGetReq _nullMarshalValue = new DCGetReq();

    public static final long serialVersionUID = -1799264904L;
}
