// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEENtripProtocal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class NtripContextOfTcpFmtHttp implements Cloneable,
                                                 java.io.Serializable
{
    public String[] headerLineValues;

    public String[] getHeaderLineValues()
    {
        return headerLineValues;
    }

    public void setHeaderLineValues(String[] headerLineValues)
    {
        this.headerLineValues = headerLineValues;
    }

    public String getHeaderLineValues(int index)
    {
        return this.headerLineValues[index];
    }

    public void setHeaderLineValues(int index, String val)
    {
        this.headerLineValues[index] = val;
    }

    public java.util.Map<String, String> headerKeyValues;

    public java.util.Map<String, String> getHeaderKeyValues()
    {
        return headerKeyValues;
    }

    public void setHeaderKeyValues(java.util.Map<String, String> headerKeyValues)
    {
        this.headerKeyValues = headerKeyValues;
    }

    public boolean hasData;

    public boolean getHasData()
    {
        return hasData;
    }

    public void setHasData(boolean hasData)
    {
        this.hasData = hasData;
    }

    public boolean isHasData()
    {
        return hasData;
    }

    public String data;

    public String getData()
    {
        return data;
    }

    public void setData(String data)
    {
        this.data = data;
    }

    public boolean hasEnd;

    public boolean getHasEnd()
    {
        return hasEnd;
    }

    public void setHasEnd(boolean hasEnd)
    {
        this.hasEnd = hasEnd;
    }

    public boolean isHasEnd()
    {
        return hasEnd;
    }

    public String end;

    public String getEnd()
    {
        return end;
    }

    public void setEnd(String end)
    {
        this.end = end;
    }

    public NtripContextOfTcpFmtHttp()
    {
        this.hasData = false;
        this.data = "";
        this.hasEnd = false;
        this.end = "";
    }

    public NtripContextOfTcpFmtHttp(String[] headerLineValues, java.util.Map<String, String> headerKeyValues, boolean hasData, String data, boolean hasEnd, String end)
    {
        this.headerLineValues = headerLineValues;
        this.headerKeyValues = headerKeyValues;
        this.hasData = hasData;
        this.data = data;
        this.hasEnd = hasEnd;
        this.end = end;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        NtripContextOfTcpFmtHttp r = null;
        if(rhs instanceof NtripContextOfTcpFmtHttp)
        {
            r = (NtripContextOfTcpFmtHttp)rhs;
        }

        if(r != null)
        {
            if(!java.util.Arrays.equals(this.headerLineValues, r.headerLineValues))
            {
                return false;
            }
            if(this.headerKeyValues != r.headerKeyValues)
            {
                if(this.headerKeyValues == null || r.headerKeyValues == null || !this.headerKeyValues.equals(r.headerKeyValues))
                {
                    return false;
                }
            }
            if(this.hasData != r.hasData)
            {
                return false;
            }
            if(this.data != r.data)
            {
                if(this.data == null || r.data == null || !this.data.equals(r.data))
                {
                    return false;
                }
            }
            if(this.hasEnd != r.hasEnd)
            {
                return false;
            }
            if(this.end != r.end)
            {
                if(this.end == null || r.end == null || !this.end.equals(r.end))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::NtripContextOfTcpFmtHttp");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, headerLineValues);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, headerKeyValues);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, hasData);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, data);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, hasEnd);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, end);
        return h_;
    }

    public NtripContextOfTcpFmtHttp clone()
    {
        NtripContextOfTcpFmtHttp c = null;
        try
        {
            c = (NtripContextOfTcpFmtHttp)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeStringSeq(this.headerLineValues);
        StringStrDictHelper.write(ostr, this.headerKeyValues);
        ostr.writeBool(this.hasData);
        ostr.writeString(this.data);
        ostr.writeBool(this.hasEnd);
        ostr.writeString(this.end);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.headerLineValues = istr.readStringSeq();
        this.headerKeyValues = StringStrDictHelper.read(istr);
        this.hasData = istr.readBool();
        this.data = istr.readString();
        this.hasEnd = istr.readBool();
        this.end = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, NtripContextOfTcpFmtHttp v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public NtripContextOfTcpFmtHttp ice_read(com.zeroc.Ice.InputStream istr)
    {
        NtripContextOfTcpFmtHttp v = new NtripContextOfTcpFmtHttp();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<NtripContextOfTcpFmtHttp> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, NtripContextOfTcpFmtHttp v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<NtripContextOfTcpFmtHttp> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(NtripContextOfTcpFmtHttp.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final NtripContextOfTcpFmtHttp _nullMarshalValue = new NtripContextOfTcpFmtHttp();

    public static final long serialVersionUID = -666014364L;
}
