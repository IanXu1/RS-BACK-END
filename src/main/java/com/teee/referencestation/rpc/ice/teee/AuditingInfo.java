// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `TEEEDCBasic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.teee.referencestation.rpc.ice.teee;

public class AuditingInfo implements Cloneable,
                                     java.io.Serializable
{
    public boolean isDeleted;

    public boolean getIsDeleted()
    {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted)
    {
        this.isDeleted = isDeleted;
    }

    public boolean isIsDeleted()
    {
        return isDeleted;
    }

    public long createdBy;

    public long getCreatedBy()
    {
        return createdBy;
    }

    public void setCreatedBy(long createdBy)
    {
        this.createdBy = createdBy;
    }

    public long createdTimeStamp;

    public long getCreatedTimeStamp()
    {
        return createdTimeStamp;
    }

    public void setCreatedTimeStamp(long createdTimeStamp)
    {
        this.createdTimeStamp = createdTimeStamp;
    }

    public long lastModifiedBy;

    public long getLastModifiedBy()
    {
        return lastModifiedBy;
    }

    public void setLastModifiedBy(long lastModifiedBy)
    {
        this.lastModifiedBy = lastModifiedBy;
    }

    public long lastModifiedTimeStamp;

    public long getLastModifiedTimeStamp()
    {
        return lastModifiedTimeStamp;
    }

    public void setLastModifiedTimeStamp(long lastModifiedTimeStamp)
    {
        this.lastModifiedTimeStamp = lastModifiedTimeStamp;
    }

    public AuditingInfo()
    {
        this.isDeleted = false;
        this.createdBy = 0L;
        this.createdTimeStamp = 0L;
        this.lastModifiedBy = 0L;
        this.lastModifiedTimeStamp = 0L;
    }

    public AuditingInfo(boolean isDeleted, long createdBy, long createdTimeStamp, long lastModifiedBy, long lastModifiedTimeStamp)
    {
        this.isDeleted = isDeleted;
        this.createdBy = createdBy;
        this.createdTimeStamp = createdTimeStamp;
        this.lastModifiedBy = lastModifiedBy;
        this.lastModifiedTimeStamp = lastModifiedTimeStamp;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AuditingInfo r = null;
        if(rhs instanceof AuditingInfo)
        {
            r = (AuditingInfo)rhs;
        }

        if(r != null)
        {
            if(this.isDeleted != r.isDeleted)
            {
                return false;
            }
            if(this.createdBy != r.createdBy)
            {
                return false;
            }
            if(this.createdTimeStamp != r.createdTimeStamp)
            {
                return false;
            }
            if(this.lastModifiedBy != r.lastModifiedBy)
            {
                return false;
            }
            if(this.lastModifiedTimeStamp != r.lastModifiedTimeStamp)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::teee::AuditingInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isDeleted);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, createdBy);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, createdTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifiedBy);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifiedTimeStamp);
        return h_;
    }

    public AuditingInfo clone()
    {
        AuditingInfo c = null;
        try
        {
            c = (AuditingInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeBool(this.isDeleted);
        ostr.writeLong(this.createdBy);
        ostr.writeLong(this.createdTimeStamp);
        ostr.writeLong(this.lastModifiedBy);
        ostr.writeLong(this.lastModifiedTimeStamp);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.isDeleted = istr.readBool();
        this.createdBy = istr.readLong();
        this.createdTimeStamp = istr.readLong();
        this.lastModifiedBy = istr.readLong();
        this.lastModifiedTimeStamp = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, AuditingInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public AuditingInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        AuditingInfo v = new AuditingInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<AuditingInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, AuditingInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(33);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<AuditingInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(AuditingInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final AuditingInfo _nullMarshalValue = new AuditingInfo();

    public static final long serialVersionUID = 1667966201L;
}
